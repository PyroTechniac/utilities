{"version":3,"file":"index.js","sources":["../src/lib/MessagePrompter/constants.ts","../src/lib/builders/MessageBuilder.ts","../src/lib/PaginatedMessage.ts","../src/lib/MessagePrompter/strategies/MessagePrompterBaseStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterConfirmStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterMessageStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterNumberStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterReactionStrategy.ts","../src/lib/MessagePrompter/MessagePrompter.ts","../src/lib/LazyPaginatedMessage.ts","../src/lib/type-guards.ts"],"sourcesContent":["import type { APIMessageContentResolvable, MessageAdditions, MessageOptions } from 'discord.js';\n\nexport type Constructor<A extends readonly any[] = readonly any[], R = any> = new (...args: A) => R;\nexport type Awaited<T> = PromiseLike<T> | T;\n\n/**\n * A type to extend multiple discord types and simplify usage in [[MessagePrompter]]\n */\nexport type MessagePrompterMessage = APIMessageContentResolvable | (MessageOptions & { split?: false }) | MessageAdditions;\n\nexport const enum MessagePrompterStrategies {\n\tConfirm = 'confirm',\n\tNumber = 'number',\n\tMessage = 'message',\n\tReaction = 'reaction'\n}\n","import type { MessageEmbed, MessageMentionOptions, MessageOptions } from 'discord.js';\n\n/**\n * Exclude null and undefined from T\n */\ntype Defined<T> = T extends undefined ? never : T;\n\nexport type MessageBuilderFileResolvable = Defined<MessageOptions['files']>[number];\nexport type MessageBuilderCodeResolvable = Defined<MessageOptions['code']>;\nexport type MessageBuilderSplitResolvable = Defined<MessageOptions['split']>;\nexport type MessageBuilderResolvable = Omit<MessageOptions, 'embed' | 'disableMentions' | 'reply'> & { embed?: MessageEmbed };\n\n/**\n * A message builder class, it implements the {@link https://discord.js.org/#/docs/main/stable/typedef/MessageOptions MessageOptions}\n * interface.\n */\nexport class MessageBuilder implements MessageOptions {\n\t/**\n\t * Whether or not the message should be spoken aloud.\n\t * @default false\n\t */\n\tpublic tts?: boolean;\n\n\t/**\n\t * The nonce for the message.\n\t * @default ''\n\t */\n\tpublic nonce?: string;\n\n\t/**\n\t * The content for the message. If set to undefined and the builder is used to edit, the content will not be\n\t * replaced.\n\t */\n\tpublic content?: string;\n\n\t/**\n\t * An embed for the message. If set to undefined and the builder is used to edit, the embed will not be replaced.\n\t */\n\tpublic embed?: MessageEmbed;\n\n\t/**\n\t * Which mentions should be parsed from the message content.\n\t */\n\tpublic allowedMentions?: MessageMentionOptions;\n\n\t/**\n\t * Files to send with the message. This should not be set when editing a message, as Discord does not support\n\t * editing file attachments.\n\t */\n\tpublic files?: MessageBuilderFileResolvable[];\n\n\t/**\n\t * Language for optional codeblock formatting to apply.\n\t */\n\tpublic code?: MessageBuilderCodeResolvable;\n\n\t/**\n\t * Whether or not the message should be split into multiple messages if it exceeds the character limit. If an object\n\t * is provided, these are the options for splitting the message.\n\t */\n\tpublic split?: MessageBuilderSplitResolvable;\n\n\tpublic constructor(options?: MessageBuilderResolvable) {\n\t\tthis.tts = options?.tts ?? MessageBuilder.defaults.tts;\n\t\tthis.nonce = options?.nonce ?? MessageBuilder.defaults.nonce;\n\t\tthis.content = options?.content ?? MessageBuilder.defaults.content;\n\t\tthis.embed = options?.embed ?? MessageBuilder.defaults.embed;\n\t\tthis.allowedMentions = options?.allowedMentions ?? MessageBuilder.defaults.allowedMentions;\n\t\tthis.files = options?.files ?? MessageBuilder.defaults.files;\n\t\tthis.code = options?.code ?? MessageBuilder.defaults.code;\n\t\tthis.split = options?.split ?? MessageBuilder.defaults.split;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.tts]] field.\n\t * @param tts Whether or not the message should be spoken aloud.\n\t */\n\tpublic setTTS(tts?: boolean): this {\n\t\tthis.tts = tts;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.nonce]] field.\n\t * @param nonce The nonce for the message.\n\t */\n\tpublic setNonce(nonce?: string): this {\n\t\tthis.nonce = nonce;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.content]] field.\n\t * @param content The content for the message. If set to undefined and the builder is used to edit, the content will\n\t * not be replaced.\n\t */\n\tpublic setContent(content?: string): this {\n\t\tthis.content = content;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.embed]] field.\n\t * @param embed An embed for the message. If set to undefined and the builder is used to edit, the embed will not be\n\t * replaced.\n\t */\n\tpublic setEmbed(embed?: MessageEmbed): this {\n\t\tthis.embed = embed;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.allowedMentions]] field.\n\t * @param allowedMentions Which mentions should be parsed from the message content.\n\t */\n\tpublic setAllowedMentions(allowedMentions?: MessageMentionOptions): this {\n\t\tthis.allowedMentions = allowedMentions;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new value for the [[MessageBuilder.files]] field array.\n\t * @param file The file to add to the [[MessageBuilder.files]] field array.\n\t */\n\tpublic addFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = this.files?.concat(file) ?? [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a single value for the [[MessageBuilder.files]] field array.\n\t * @param file The file to send with the message. This should not be set when editing a message, as Discord does not\n\t * support editing file attachments.\n\t */\n\tpublic setFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.files]] field.\n\t * @param files The files to send with the message. This should not be set when editing a message, as Discord does\n\t * not support editing file attachments.\n\t */\n\tpublic setFiles(files?: MessageBuilderFileResolvable[]): this {\n\t\tthis.files = files;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.code]] field.\n\t * @param code Language for optional codeblock formatting to apply.\n\t */\n\tpublic setCode(code?: MessageBuilderCodeResolvable): this {\n\t\tthis.code = code;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.split]] field.\n\t * @param split Whether or not the message should be split into multiple messages if it exceeds the character limit.\n\t * If an object is provided, these are the options for splitting the message.\n\t */\n\tpublic setSplit(split?: MessageBuilderSplitResolvable): this {\n\t\tthis.split = split;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The default values for all MessageBuilder instances.\n\t */\n\tpublic static defaults: MessageBuilderResolvable = {};\n}\n","import { APIMessage, Message, MessageOptions, MessageReaction, NewsChannel, ReactionCollector, TextChannel, User } from 'discord.js';\n\n/**\n * This is a [[PaginatedMessage]], a utility to paginate messages (usually embeds).\n * You must either use this class directly or extend it.\n *\n * [[PaginatedMessage]] uses actions, these are essentially reaction emojis, when triggered run the said action.\n * You can utilize your own actions, or you can use the [[PaginatedMessage.defaultActions]].\n * [[PaginatedMessage.defaultActions]] is also static so you can modify these directly.\n *\n * [[PaginatedMessage]] also uses pages, these are simply {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessages}.\n *\n * @example\n * ```typescript\n * const handler = new PaginatedMessage();\n * ```\n *\n * @example\n * ```typescript\n * // To utilize actions you can use the IPaginatedMessageAction by implementing it into a class.\n * // [[PaginatedMessage]] requires you to have the class initialized using `new`.\n *\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction = {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }```\n *\n */\nexport class PaginatedMessage {\n\t/**\n\t * The pages to be converted to [[PaginatedMessage.messages]]\n\t */\n\tpublic pages: MessagePage[];\n\n\t/**\n\t * The response message used to edit on page changes.\n\t */\n\tpublic response: Message | null = null;\n\n\t/**\n\t * The collector used for handling reactions.\n\t */\n\tpublic collector: ReactionCollector | null = null;\n\n\t/**\n\t * The pages which were converted from [[PaginatedMessage.pages]]\n\t */\n\tpublic messages: (APIMessage | null)[] = [];\n\n\t/**\n\t * The actions which are to be used.\n\t */\n\tpublic actions = new Map<string, IPaginatedMessageAction>();\n\n\t/**\n\t * The handler's current page/message index.\n\t */\n\tpublic index = 0;\n\n\t/**\n\t * The amount of time to idle before the paginator is closed. Defaults to `20 * 1000`.\n\t */\n\tpublic idle = 20 * 1000;\n\n\t/**\n\t * Constructor for the [[PaginatedMessage]] class\n\t * @param __namedParameters The [[PaginatedMessageOptions]] for this instance of the [[PaginatedMessage]] class\n\t */\n\tpublic constructor({ pages, actions }: PaginatedMessageOptions = {}) {\n\t\tthis.pages = pages ?? [];\n\n\t\tfor (const page of this.pages) this.messages.push(page instanceof APIMessage ? page : null);\n\t\tfor (const action of actions ?? this.constructor.defaultActions) this.actions.set(action.id, action);\n\t}\n\n\t/**\n\t * Sets the handler's current page/message index.\n\t * @param index The number to set the index to.\n\t */\n\tpublic setIndex(index: number): this {\n\t\tthis.index = index;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the amount of time to idle before the paginator is closed.\n\t * @param idle The number to set the idle to.\n\t */\n\tpublic setIdle(idle: number): this {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears all current actions and sets them. The order given is the order they will be used.\n\t * @param actions The actions to set.\n\t */\n\tpublic setActions(actions: IPaginatedMessageAction[]): this {\n\t\tthis.actions.clear();\n\t\treturn this.addActions(actions);\n\t}\n\n\t/**\n\t * Adds actions to the existing ones. The order given is the order they will be used.\n\t * @param actions The actions to add.\n\t */\n\tpublic addActions(actions: IPaginatedMessageAction[]): this {\n\t\tfor (const action of actions) this.addAction(action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an action to the existing ones. This will be added as the last action.\n\t * @param action The action to add.\n\t */\n\tpublic addAction(action: IPaginatedMessageAction): this {\n\t\tthis.actions.set(action.id, action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks whether or not the handler has a specific page.\n\t * @param index The index to check.\n\t */\n\tpublic hasPage(index: number): boolean {\n\t\treturn index >= 0 && index < this.pages.length;\n\t}\n\n\t/**\n\t * Clears all current pages and messages and sets them. The order given is the order they will be used.\n\t * @param pages The pages to set.\n\t */\n\tpublic setPages(pages: MessagePage[]) {\n\t\tthis.pages = [];\n\t\tthis.messages = [];\n\t\tthis.addPages(pages);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a page to the existing ones. This will be added as the last page.\n\t * @param page The page to add.\n\t */\n\tpublic addPage(page: MessagePage): this {\n\t\tthis.pages.push(page);\n\t\tthis.messages.push(page instanceof APIMessage ? page : null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add pages to the existing ones. The order given is the order they will be used.\n\t * @param pages The pages to add.\n\t */\n\tpublic addPages(pages: MessagePage[]): this {\n\t\tfor (const page of pages) this.addPage(page);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executes the [[PaginatedMessage]] and sends the pages corresponding with [[PaginatedMessage.index]].\n\t * The handler will start collecting reactions and running actions once all actions have been reacted to the message.\n\t * @param author The author to validate.\n\t * @param channel The channel to use.\n\t */\n\tpublic async run(author: User, channel: TextChannel | NewsChannel): Promise<this> {\n\t\tawait this.resolvePagesOnRun(channel);\n\n\t\t// Sanity checks to handle\n\t\tif (!this.messages.length) throw new Error('There are no messages.');\n\t\tif (!this.actions.size) throw new Error('There are no messages.');\n\n\t\tawait this.setUpMessage(channel, author);\n\t\tawait this.setUpReactions(channel, author);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executed whenever [[PaginatedMessage.run]] is called.\n\t */\n\tpublic async resolvePagesOnRun(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tfor (let i = 0; i < this.pages.length; i++) await this.resolvePage(channel, i);\n\t}\n\n\t/**\n\t * Executed whenever an action is triggered and resolved.\n\t * @param index The index to resolve.\n\t */\n\tpublic async resolvePage(channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\t// If the message was already processed, do not load it again:\n\t\tconst message = this.messages[index];\n\t\tif (message !== null) return message;\n\n\t\t// Load the page and return it:\n\t\tconst resolved = await this.handlePageLoad(this.pages[index], channel, index);\n\t\tthis.messages[index] = resolved;\n\n\t\treturn resolved;\n\t}\n\n\t/**\n\t * Clones the current handler into a new instance.\n\t */\n\tpublic clone(): PaginatedMessage {\n\t\tconst clone = new this.constructor({ pages: this.pages, actions: [] }).setIndex(this.index).setIdle(this.idle);\n\t\tclone.actions = this.actions;\n\t\tclone.response = this.response;\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Sets up the message.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpMessage(channel: TextChannel | NewsChannel, author: User): Promise<void>;\n\tprotected async setUpMessage(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tconst firstPage = this.messages[this.index]!;\n\t\tif (this.response) await this.response.edit(firstPage);\n\t\telse this.response = (await channel.send(firstPage)) as Message;\n\t}\n\n\t/**\n\t * Sets up the message's reactions and the collector.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpReactions(channel: TextChannel | NewsChannel, author: User): Promise<void> {\n\t\tthis.collector = this.response!.createReactionCollector(\n\t\t\t(reaction: MessageReaction, user: User) =>\n\t\t\t\tuser.id === author.id && (this.actions.has(reaction.emoji.identifier) || this.actions.has(reaction.emoji.name)),\n\t\t\t{ idle: this.idle }\n\t\t)\n\t\t\t.on('collect', this.handleCollect.bind(this, author, channel))\n\t\t\t.on('end', this.handleEnd.bind(this));\n\n\t\tfor (const id of this.actions.keys()) {\n\t\t\tif (this.collector.ended) break;\n\t\t\tawait this.response!.react(id);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the load of a page.\n\t * @param page The page to be loaded.\n\t * @param channel The channel the paginated message runs at.\n\t * @param index The index of the current page.\n\t */\n\tprotected async handlePageLoad(page: MessagePage, channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\tconst options = typeof page === 'function' ? await page(index, this.pages, this) : page;\n\t\treturn (options instanceof APIMessage ? options : new APIMessage(channel, options)).resolveData();\n\t}\n\n\t/**\n\t * Handles the `collect` event from the collector.\n\t * @param author The the handler is for.\n\t * @param channel The channel the handler is running at.\n\t * @param reaction The reaction that was received.\n\t * @param user The user that reacted to the message.\n\t */\n\tprotected async handleCollect(author: User, channel: TextChannel | NewsChannel, reaction: MessageReaction, user: User): Promise<void> {\n\t\tawait reaction.users.remove(user);\n\n\t\tconst action = (this.actions.get(reaction.emoji.identifier) ?? this.actions.get(reaction.emoji.name))!;\n\t\tconst previousIndex = this.index;\n\n\t\tawait action.run({\n\t\t\thandler: this,\n\t\t\tauthor,\n\t\t\tchannel,\n\t\t\tresponse: this.response!,\n\t\t\tcollector: this.collector!\n\t\t});\n\n\t\tif (previousIndex !== this.index) {\n\t\t\tawait this.response?.edit(await this.resolvePage(channel, this.index));\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `end` event from the collector.\n\t * @param reason The reason for which the collector was ended.\n\t */\n\tprotected async handleEnd(reason: string): Promise<void> {\n\t\t// Remove all listeners from the collector:\n\t\tthis.collector?.removeAllListeners();\n\n\t\t// Do not remove reactions if the message, channel, or guild, was deleted:\n\t\tif (this.response && !PaginatedMessage.deletionStopReasons.includes(reason)) {\n\t\t\tawait this.response.reactions.removeAll();\n\t\t}\n\t}\n\n\t/**\n\t * The default actions of this handler.\n\t */\n\tpublic static defaultActions: IPaginatedMessageAction[] = [\n\t\t{\n\t\t\tid: '🔢',\n\t\t\trun: async ({ handler, author, channel }) => {\n\t\t\t\tconst questionMessage = await channel.send('What page would you like to jump to?');\n\t\t\t\tconst collected = await channel\n\t\t\t\t\t.awaitMessages((message: Message) => message.author.id === author.id, { max: 1, idle: 15 * 1000 })\n\t\t\t\t\t.catch(() => null);\n\n\t\t\t\tif (collected) {\n\t\t\t\t\tconst responseMessage = collected.first();\n\n\t\t\t\t\tif (questionMessage.deletable) await questionMessage.delete();\n\t\t\t\t\tif (responseMessage) {\n\t\t\t\t\t\tif (responseMessage.deletable) await responseMessage.delete();\n\n\t\t\t\t\t\tconst i = Number(responseMessage.content) - 1;\n\n\t\t\t\t\t\tif (!Number.isNaN(i) && handler.hasPage(i)) handler.index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏪',\n\t\t\trun: ({ handler }) => (handler.index = 0)\n\t\t},\n\t\t{\n\t\t\tid: '◀️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === 0) handler.index = handler.pages.length - 1;\n\t\t\t\telse --handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '▶️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === handler.pages.length - 1) handler.index = 0;\n\t\t\t\telse ++handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏩',\n\t\t\trun: ({ handler }) => (handler.index = handler.pages.length - 1)\n\t\t},\n\t\t{\n\t\t\tid: '⏹️',\n\t\t\trun: async ({ response, collector }) => {\n\t\t\t\tawait response.reactions.removeAll();\n\t\t\t\tcollector.stop();\n\t\t\t}\n\t\t}\n\t];\n\n\t/**\n\t * The reasons sent by {@link https://discord.js.org/#/docs/main/stable/class/ReactionCollector?scrollTo=e-end ReactionCollector#end}\n\t * event when the message (or its owner) has been deleted.\n\t */\n\tpublic static deletionStopReasons = ['messageDelete', 'channelDelete', 'guildDelete'];\n}\n\nexport interface PaginatedMessage {\n\tconstructor: typeof PaginatedMessage;\n}\n\n/**\n * @example\n * ```typescript\n * // To utilize actions you can use the [[IPaginatedMessageAction]] by implementing it into a class.\n *\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }```\n */\nexport interface IPaginatedMessageAction {\n\tid: string;\n\trun(context: PaginatedMessageActionContext): Awaited<unknown>;\n}\n\n/**\n * The context to be used in [[IPaginatedMessageAction]].\n */\nexport interface PaginatedMessageActionContext {\n\thandler: PaginatedMessage;\n\tauthor: User;\n\tchannel: TextChannel | NewsChannel;\n\tresponse: Message;\n\tcollector: ReactionCollector;\n}\n\nexport interface PaginatedMessageOptions {\n\tpages?: MessagePage[];\n\tactions?: IPaginatedMessageAction[];\n}\n\n/**\n * The pages that are used for [[PaginatedMessage.pages]]\n *\n * Pages can be either an {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessage} directly,\n * or an awaited function which returns an {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessage}.\n *\n * Furthermore, {@link https://discord.js.org/#/docs/main/stable/typedef/MessageOptions MessageOptions} can be used to\n * construct the pages without state, this library also provides [[MessageBuilder]], which can be used as a chainable\n * alternative to raw objects, similar to how {@link https://discord.js.org/#/docs/main/stable/class/MessageEmbed MessageEmbed}\n * works.\n *\n * @example\n * ```typescript\n * // Direct usage as a MessageBuilder\n * new MessageBuilder().setContent('Test content!');\n * ```\n *\n * @example\n * ```typescript\n * // An awaited function. This function also passes index, pages, and handler.\n * (index, pages) =>\n *   new MessageBuilder().setEmbed(\n *     new MessageEmbed().setFooter(`Page ${index + 1} / ${pages.length}`)\n *   );\n * ```\n *\n * @example\n * ```typescript\n * // Direct usage as an APIMessage\n * new APIMessage(message.channel, {\n *   content: 'Test content!',\n * });\n * ```\n *\n * @example\n * ```typescript\n * // An awaited function. This function also passes index, pages, and handler.\n * (index, pages) =>\n *   new APIMessage(message.channel, {\n *     embed: new MessageEmbed().setFooter(`Page ${index + 1} / ${pages.length}`)\n *   });\n * ```\n */\nexport type MessagePage =\n\t| ((index: number, pages: MessagePage[], handler: PaginatedMessage) => Awaited<APIMessage | MessageOptions>)\n\t| APIMessage\n\t| MessageOptions;\n\ntype Awaited<T> = PromiseLike<T> | T;\n","import type { CollectorFilter, DMChannel, EmojiIdentifierResolvable, Message, MessageReaction, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { Awaited, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\n\nexport abstract class MessagePrompterBaseStrategy {\n\t/**\n\t * The type of strategy that was used\n\t */\n\tpublic type: string;\n\n\t/**\n\t * The timeout that was used in the collector\n\t */\n\tpublic timeout: number;\n\n\t/**\n\t * Wether to return an explicit object with data, or the strategies' default\n\t */\n\tpublic explicitReturn: boolean;\n\n\t/**\n\t * The message that has been sent in [[MessagePrompter.run]]\n\t */\n\tpublic appliedMessage: Message | null = null;\n\n\t/**\n\t * The message that will be sent in [[MessagePrompter.run]]\n\t */\n\tpublic message: MessagePrompterMessage;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(type: string, message: MessagePrompterMessage, options?: IMessagePrompterStrategyOptions) {\n\t\tthis.type = type;\n\t\tthis.timeout = options?.timeout ?? MessagePrompterBaseStrategy.defaultStrategyOptions.timeout;\n\t\tthis.explicitReturn = options?.explicitReturn ?? MessagePrompterBaseStrategy.defaultStrategyOptions.explicitReturn;\n\t\tthis.message = message;\n\t}\n\n\tpublic abstract run(channel: TextChannel | NewsChannel | DMChannel, authorOrFilter: User | CollectorFilter): Awaited<unknown>;\n\n\tprotected async collectReactions(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter,\n\t\treactions: string[] | EmojiIdentifierResolvable[]\n\t): Promise<IMessagePrompterExplicitReturnBase> {\n\t\tthis.appliedMessage = await channel.send(this.message);\n\n\t\tconst collector = this.appliedMessage.createReactionCollector(this.createReactionPromptFilter(reactions, authorOrFilter), {\n\t\t\tmax: 1,\n\t\t\ttime: this.timeout\n\t\t});\n\n\t\tlet resolved = false;\n\t\tconst collected: Promise<MessageReaction> = new Promise<MessageReaction>((resolve, reject) => {\n\t\t\tcollector.on('collect', (r) => {\n\t\t\t\tresolve(r);\n\t\t\t\tresolved = true;\n\t\t\t\tcollector.stop();\n\t\t\t});\n\n\t\t\tcollector.on('end', (collected) => {\n\t\t\t\tresolved = true;\n\t\t\t\tif (!collected.size) reject(new Error('Collector has ended'));\n\t\t\t});\n\t\t});\n\n\t\tfor (const reaction of reactions) {\n\t\t\tif (resolved) break;\n\n\t\t\tawait this.appliedMessage.react(reaction);\n\t\t}\n\n\t\tconst firstReaction = await collected;\n\t\tconst emoji = firstReaction?.emoji;\n\n\t\tconst reaction = reactions.find((r) => (emoji?.id ?? emoji?.name) === r);\n\n\t\treturn {\n\t\t\temoji,\n\t\t\treaction,\n\t\t\tstrategy: this,\n\t\t\tappliedMessage: this.appliedMessage,\n\t\t\tmessage: this.message\n\t\t};\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitReactions function\n\t */\n\tprotected createReactionPromptFilter(reactions: string[] | EmojiIdentifierResolvable[], authorOrFilter: User | CollectorFilter): CollectorFilter {\n\t\treturn async (reaction: MessageReaction, user: User) =>\n\t\t\treactions.includes(reaction.emoji.id ?? reaction.emoji.name) &&\n\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(reaction, user) : user.id === authorOrFilter.id) &&\n\t\t\t!user.bot;\n\t}\n\n\t/**\n\t * The default strategy options\n\t */\n\tpublic static defaultStrategyOptions: Required<IMessagePrompterStrategyOptions> = {\n\t\ttimeout: 10 * 1000,\n\t\texplicitReturn: false\n\t};\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitConfirmReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterConfirmStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterConfirmStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterConfirmStrategyOptions {\n\t/**\n\t * The cancel emoji used\n\t */\n\tpublic confirmEmoji: string | EmojiResolvable;\n\n\t/**\n\t * The confirm emoji used\n\t */\n\tpublic cancelEmoji: string | EmojiResolvable;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param message The message to be sent [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options?: IMessagePrompterConfirmStrategyOptions) {\n\t\tsuper('confirm', message, options);\n\n\t\tthis.confirmEmoji = options?.confirmEmoji ?? MessagePrompterConfirmStrategy.confirmEmoji;\n\t\tthis.cancelEmoji = options?.cancelEmoji ?? MessagePrompterConfirmStrategy.cancelEmoji;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals confirm.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to a boolean denoting the value of the input (`true` for yes, `false` for no).\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitConfirmReturn | boolean> {\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, [this.confirmEmoji, this.cancelEmoji]);\n\n\t\tconst confirmed = (response?.emoji?.id ?? response?.emoji?.name) === MessagePrompterConfirmStrategy.confirmEmoji;\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, confirmed } : confirmed;\n\t}\n\n\t/**\n\t * The default confirm emoji used for [[MessagePrompterConfirmStrategy]]\n\t */\n\tpublic static confirmEmoji: string | EmojiResolvable = '🇾';\n\n\t/**\n\t * The default cancel emoji used for [[MessagePrompterConfirmStrategy]]\n\t */\n\tpublic static cancelEmoji: string | EmojiResolvable = '🇳';\n}\n","import type { CollectorFilter, DMChannel, Message, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitMessageReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterMessageStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterStrategyOptions {\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterStrategyOptions) {\n\t\tsuper('message', message, options);\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals message.\n\t * The handler will wait for one (1) message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the message object received.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitMessageReturn | Message> {\n\t\tthis.appliedMessage = await channel.send(this.message);\n\n\t\tconst collector = await channel.awaitMessages(this.createMessagePromptFilter(authorOrFilter), {\n\t\t\tmax: 1,\n\t\t\ttime: this.timeout,\n\t\t\terrors: ['time']\n\t\t});\n\t\tconst response = collector.first();\n\n\t\tif (!response) {\n\t\t\tthrow new Error('No messages received');\n\t\t}\n\n\t\treturn this.explicitReturn\n\t\t\t? {\n\t\t\t\t\tresponse,\n\t\t\t\t\tstrategy: this as MessagePrompterBaseStrategy,\n\t\t\t\t\tappliedMessage: this.appliedMessage,\n\t\t\t\t\tmessage: this.message\n\t\t\t  }\n\t\t\t: response;\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitMessages function\n\t */\n\tprivate createMessagePromptFilter(authorOrFilter: User | CollectorFilter): CollectorFilter {\n\t\treturn async (message: Message) =>\n\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(message) : message.author.id === authorOrFilter.id) && !message.author.bot;\n\t}\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitNumberReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterNumberStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterNumberStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterNumberStrategyOptions {\n\t/**\n\t * The available number emojis\n\t */\n\tpublic numberEmojis: string[] | EmojiResolvable[];\n\t/**\n\t * The available number emojis\n\t */\n\tpublic start: number;\n\t/**\n\t * The available number emojis\n\t */\n\tpublic end: number;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterNumberStrategyOptions) {\n\t\tsuper('number', message, options);\n\n\t\tthis.numberEmojis = options?.numberEmojis ?? MessagePrompterNumberStrategy.numberEmojis;\n\t\tthis.start = options?.start ?? 0;\n\t\tthis.end = options?.end ?? 10;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals number.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the selected number within the range.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitNumberReturn | number> {\n\t\t// 0 and 10 are the maximum available emojis as a number\n\t\tif (this.start < 0) throw new TypeError('Starting number cannot be less than 0.');\n\t\tif (this.end > 10) throw new TypeError('Ending number cannot be more than 10.');\n\n\t\tconst numbers = Array.from({ length: this.end - this.start + 1 }, (_, n: number) => n + this.start);\n\t\tconst emojis = this.numberEmojis.slice(this.start, this.end);\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, emojis);\n\n\t\tconst emojiIndex = emojis.findIndex((emoji) => (response?.emoji?.id ?? response?.emoji?.name) === emoji);\n\t\tconst number = numbers[emojiIndex];\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, number } : number;\n\t}\n\n\t/**\n\t * The default available number emojis\n\t */\n\tpublic static numberEmojis = ['0️⃣', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟'];\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterReactionStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterReactionStrategy extends MessagePrompterBaseStrategy implements MessagePrompterReactionStrategy {\n\t/**\n\t * The emojis used\n\t */\n\tpublic reactions: string[] | EmojiResolvable[];\n\n\t/**\n\t * Constructor for the [[MessagePrompterReactionStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterReactionStrategyOptions) {\n\t\tsuper('reactions', message, options);\n\n\t\tthis.reactions = options?.reactions;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompterReactionStrategy]] and sends the message.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the reaction object.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitReturnBase | string | EmojiResolvable> {\n\t\tif (!this.reactions?.length) throw new TypeError('There are no reactions provided.');\n\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, this.reactions);\n\n\t\treturn this.explicitReturn ? response : response.reaction ?? response;\n\t}\n}\n","import type { CollectorFilter, DMChannel, NewsChannel, TextChannel, User } from 'discord.js';\nimport { Constructor, MessagePrompterMessage, MessagePrompterStrategies } from './constants';\nimport { MessagePrompterBaseStrategy } from './strategies/MessagePrompterBaseStrategy';\nimport { MessagePrompterConfirmStrategy } from './strategies/MessagePrompterConfirmStrategy';\nimport { MessagePrompterMessageStrategy } from './strategies/MessagePrompterMessageStrategy';\nimport { MessagePrompterNumberStrategy } from './strategies/MessagePrompterNumberStrategy';\nimport { MessagePrompterReactionStrategy } from './strategies/MessagePrompterReactionStrategy';\nimport type {\n\tIMessagePrompterConfirmStrategyOptions,\n\tIMessagePrompterNumberStrategyOptions,\n\tIMessagePrompterReactionStrategyOptions,\n\tIMessagePrompterStrategyOptions\n} from './strategyOptions';\n\n/**\n * This is a [[MessagePrompter]], a utility that sends a message, prompting for user input. The prompt can resolve to any kind of input.\n * There are several specifiable types to prompt for user input, and they are as follows:\n * - Confirm\n *   This will send a simple Yes/No prompt, using reactions.\n * - Number\n *   This will prompt for an integer. By default it will be a number between 0 and 10 (inclusive), however you can also specify your own custom range (inclusive).\n * - Reactions\n *   This can be any kind of reaction emoji that Discord supports, and as many as you want. This type will return that reaction instead of a boolean.\n * - Message\n *   This will prompt the user and require a response in the form of a message. This can be helpful if you require a user to upload an image for example, or give text input.\n *\n * You must either use this class directly or extend it.\n *\n * [[MessagePrompter]] uses reactions to prompt for a yes/no answer and returns it.\n * You can modify the confirm and cancel reaction used for each message, or use the [[MessagePrompter.defaultPrompts]].\n * [[MessagePrompter.defaultPrompts]] is also static so you can modify these directly.\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Are you sure you want to continue?');\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Choose a number between 5 and 10?', 'number', {\n * \t\tstart: 5,\n * \t\tend: 10\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Are you happy or sad?', 'reaction', {\n * \t\treactions: ['🙂', '🙁']\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Do you love me?', 'message');\n * const result = await handler.run(channel, author);\n * ```\n */\nexport class MessagePrompter {\n\t/**\n\t * The strategy used in [[MessagePrompter.run]]\n\t */\n\tpublic strategy: MessagePrompterBaseStrategy;\n\n\t/**\n\t * Constructor for the [[MessagePrompter]] class\n\t * @param message The message to send.\n\t * @param strategy The strategy name or Instance to use\n\t * @param strategyOptions The options that are passed to the strategy\n\t */\n\tpublic constructor(\n\t\tmessage: MessagePrompterMessage | MessagePrompterBaseStrategy,\n\t\tstrategy?: MessagePrompterStrategies,\n\t\tstrategyOptions?:\n\t\t\t| IMessagePrompterStrategyOptions\n\t\t\t| IMessagePrompterConfirmStrategyOptions\n\t\t\t| IMessagePrompterNumberStrategyOptions\n\t\t\t| IMessagePrompterReactionStrategyOptions\n\t) {\n\t\tlet strategyToRun: MessagePrompterBaseStrategy | undefined = undefined;\n\n\t\tif (message instanceof MessagePrompterBaseStrategy) {\n\t\t\tstrategyToRun = message as MessagePrompterBaseStrategy;\n\t\t} else {\n\t\t\tconst mapStrategy = MessagePrompter.strategies.get(strategy ?? MessagePrompter.defaultStrategy);\n\n\t\t\tif (!mapStrategy) {\n\t\t\t\tthrow new Error('No strategy provided');\n\t\t\t}\n\n\t\t\tstrategyToRun = new mapStrategy(message, strategyOptions);\n\t\t}\n\n\t\tthis.strategy = strategyToRun;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t */\n\tpublic run(channel: TextChannel | NewsChannel | DMChannel, authorOrFilter: User | CollectorFilter) {\n\t\treturn this.strategy.run(channel, authorOrFilter);\n\t}\n\n\t/**\n\t * The available strategies\n\t */\n\tpublic static strategies: Map<\n\t\tMessagePrompterStrategies,\n\t\tConstructor<\n\t\t\t| ConstructorParameters<typeof MessagePrompterConfirmStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterNumberStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterReactionStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterMessageStrategy>,\n\t\t\tMessagePrompterConfirmStrategy | MessagePrompterNumberStrategy | MessagePrompterReactionStrategy | MessagePrompterMessageStrategy\n\t\t>\n\t\t// @ts-expect-error 2322\n\t> = new Map([\n\t\t[MessagePrompterStrategies.Confirm, MessagePrompterConfirmStrategy],\n\t\t[MessagePrompterStrategies.Number, MessagePrompterNumberStrategy],\n\t\t[MessagePrompterStrategies.Reaction, MessagePrompterReactionStrategy],\n\t\t[MessagePrompterStrategies.Message, MessagePrompterMessageStrategy]\n\t]);\n\n\t/**\n\t * The default strategy to use\n\t */\n\tpublic static defaultStrategy: MessagePrompterStrategies = MessagePrompterStrategies.Confirm;\n}\n","import type { APIMessage, NewsChannel, TextChannel } from 'discord.js';\nimport { PaginatedMessage } from './PaginatedMessage';\n\n/**\n * This is a LazyPaginatedMessage. Instead of resolving all pages that are functions on [[PaginatedMessage.run]] will resolve when requested.\n */\nexport class LazyPaginatedMessage extends PaginatedMessage {\n\t/**\n\t * Only resolves the page corresponding with the handler's current index.\n\t */\n\tpublic async resolvePagesOnRun(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tawait this.resolvePage(channel, this.index);\n\t}\n\n\t/**\n\t * Resolves the page corresponding with the given index. This also resolves the index's before and after the given index.\n\t * @param index The index to resolve. Defaults to handler's current index.\n\t */\n\tpublic async resolvePage(channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\tconst promises = [super.resolvePage(channel, index)];\n\t\tif (this.hasPage(index - 1)) promises.push(super.resolvePage(channel, index - 1));\n\t\tif (this.hasPage(index + 1)) promises.push(super.resolvePage(channel, index + 1));\n\n\t\tconst [result] = await Promise.all(promises);\n\t\treturn result;\n\t}\n}\n","import type {\n\tCategoryChannel,\n\tChannel,\n\tDMChannel,\n\tGuildChannel,\n\tNewsChannel,\n\tPartialGroupDMChannel,\n\tStoreChannel,\n\tTextChannel,\n\tVoiceChannel\n} from 'discord.js';\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/CategoryChannel CategoryChannel}\n * @param channel The channel to check\n */\nexport function isCategoryChannel(channel: Channel): channel is CategoryChannel {\n\treturn channel.type === 'category';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/DMChannel DMChannel}\n * @param channel The channel to check\n */\nexport function isDMChannel(channel: Channel): channel is DMChannel {\n\treturn channel.type === 'dm';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/PartialGroupDMChannel PartialGroupDMChannel}\n * @param channel The channel to check\n */\nexport function isGroupChannel(channel: Channel): channel is PartialGroupDMChannel {\n\treturn channel.type === 'group';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/GuildChannel GuildChannel}\n * @param channel The channel to check\n */\nexport function isGuildBasedChannel(channel: Channel): channel is GuildChannel {\n\treturn channel.type !== 'dm' && channel.type !== 'group' && channel.type !== 'unknown';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/NewsChannel NewsChannel}\n * @param channel The channel to check\n */\nexport function isNewsChannel(channel: Channel): channel is NewsChannel {\n\treturn channel.type === 'news';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/StoreChannel StoreChannel}\n * @param channel The channel to check\n */\nexport function isStoreChannel(channel: Channel): channel is StoreChannel {\n\treturn channel.type === 'store';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/TextChannel TextChannel}\n * @param channel The channel to check\n */\nexport function isTextChannel(channel: Channel): channel is TextChannel {\n\treturn channel.type === 'text';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/VoiceChannel VoiceChannel}\n * @param channel The channel to check\n */\nexport function isVoiceChannel(channel: Channel): channel is VoiceChannel {\n\treturn channel.type === 'voice';\n}\n"],"names":["MessagePrompterStrategies","MessageBuilder","[object Object]","options","Object","this","tts","defaults","nonce","content","embed","allowedMentions","files","code","split","file","concat","PaginatedMessage","pages","actions","Map","page","messages","push","APIMessage","action","constructor","defaultActions","set","id","index","idle","clear","addActions","addAction","length","addPages","addPage","author","channel","resolvePagesOnRun","Error","size","setUpMessage","setUpReactions","i","resolvePage","message","resolved","handlePageLoad","clone","setIndex","setIdle","response","firstPage","edit","send","collector","createReactionCollector","reaction","user","has","emoji","identifier","name","on","handleCollect","bind","handleEnd","keys","ended","react","resolveData","users","remove","get","previousIndex","run","handler","reason","removeAllListeners","deletionStopReasons","includes","reactions","removeAll","async","questionMessage","collected","awaitMessages","max","catch","responseMessage","first","deletable","delete","Number","isNaN","hasPage","stop","MessagePrompterBaseStrategy","type","timeout","defaultStrategyOptions","explicitReturn","authorOrFilter","appliedMessage","createReactionPromptFilter","time","Promise","resolve","reject","r","firstReaction","find","strategy","bot","MessagePrompterConfirmStrategy","super","confirmEmoji","cancelEmoji","collectReactions","confirmed","MessagePrompterMessageStrategy","createMessagePromptFilter","errors","MessagePrompterNumberStrategy","numberEmojis","start","end","TypeError","numbers","Array","from","_","n","emojis","slice","number","findIndex","MessagePrompterReactionStrategy","MessagePrompter","strategyOptions","strategyToRun","mapStrategy","strategies","defaultStrategy","LazyPaginatedMessage","promises","result","all","isCategoryChannel","isDMChannel","isGroupChannel","isGuildBasedChannel","isNewsChannel","isStoreChannel","isTextChannel","isVoiceChannel"],"mappings":"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"}