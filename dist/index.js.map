{"version":3,"file":"index.js","sources":["../src/lib/constants.ts","../src/lib/Cron.ts","../../utilities/dist/index.mjs","../src/lib/Duration.ts","../src/lib/DurationFormatter.ts","../src/lib/TimerManager.ts","../src/lib/Timestamp.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport type { DurationFormatAssetsTime } from './DurationFormatter';\n\n/**\n * The supported time types\n */\nexport const enum TimeTypes {\n\tSecond = 'second',\n\tMinute = 'minute',\n\tHour = 'hour',\n\tDay = 'day',\n\tWeek = 'week',\n\tMonth = 'month',\n\tYear = 'year'\n}\n\nexport const enum Time {\n\tMillisecond = 1,\n\tSecond = 1000,\n\tMinute = 1000 * 60,\n\tHour = 1000 * 60 * 60,\n\tDay = 1000 * 60 * 60 * 24,\n\tMonth = 1000 * 60 * 60 * 24 * (365 / 12),\n\tYear = 1000 * 60 * 60 * 24 * 365\n}\n\nexport const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const tokens = new Map<string, number>([\n\t['Y', 4],\n\t['Q', 1],\n\t['M', 4],\n\t['D', 4],\n\t['d', 4],\n\t['X', 1],\n\t['x', 1],\n\t['H', 2],\n\t['h', 2],\n\t['a', 1],\n\t['A', 1],\n\t['m', 2],\n\t['s', 2],\n\t['S', 3],\n\t['Z', 2],\n\t['l', 4],\n\t['L', 4],\n\t['T', 1],\n\t['t', 1]\n]);\n\nexport const partRegex = /^(?:(\\*)|(\\d+)(?:-(\\d+))?)(?:\\/(\\d+))?$/;\n\nexport const wildcardRegex = /\\bh\\b|\\B\\?\\B/g;\n\nexport const allowedNum = [\n\t[0, 59],\n\t[0, 23],\n\t[1, 31],\n\t[1, 12],\n\t[0, 6]\n];\n\nexport const predefined = {\n\t'@annually': '0 0 1 1 *',\n\t'@yearly': '0 0 1 1 *',\n\t'@monthly': '0 0 1 * *',\n\t'@weekly': '0 0 * * 0',\n\t'@daily': '0 0 * * *',\n\t'@hourly': '0 * * * *'\n} as const;\n\nexport const cronTokens = {\n\tjan: 1,\n\tfeb: 2,\n\tmar: 3,\n\tapr: 4,\n\tmay: 5,\n\tjun: 6,\n\tjul: 7,\n\taug: 8,\n\tsep: 9,\n\toct: 10,\n\tnov: 11,\n\tdec: 12,\n\tsun: 0,\n\tmon: 1,\n\ttue: 2,\n\twed: 3,\n\tthu: 4,\n\tfri: 5,\n\tsat: 6\n} as const;\n\nexport const tokensRegex = new RegExp(Object.keys(cronTokens).join('|'), 'g');\n\nexport const DEFAULT_UNITS: DurationFormatAssetsTime = {\n\t[TimeTypes.Year]: {\n\t\t1: 'year',\n\t\tDEFAULT: 'years'\n\t},\n\t[TimeTypes.Month]: {\n\t\t1: 'month',\n\t\tDEFAULT: 'months'\n\t},\n\t[TimeTypes.Week]: {\n\t\t1: 'week',\n\t\tDEFAULT: 'weeks'\n\t},\n\t[TimeTypes.Day]: {\n\t\t1: 'day',\n\t\tDEFAULT: 'days'\n\t},\n\t[TimeTypes.Hour]: {\n\t\t1: 'hour',\n\t\tDEFAULT: 'hours'\n\t},\n\t[TimeTypes.Minute]: {\n\t\t1: 'minute',\n\t\tDEFAULT: 'minutes'\n\t},\n\t[TimeTypes.Second]: {\n\t\t1: 'second',\n\t\tDEFAULT: 'seconds'\n\t}\n};\n","/* eslint-disable @typescript-eslint/restrict-plus-operands */\nimport { range } from '@sapphire/utilities';\nimport { allowedNum, cronTokens, partRegex, predefined, Time, tokensRegex, wildcardRegex } from './constants';\n\n/**\n * Handles Cron strings and generates dates based on the cron string provided.\n * @see https://en.wikipedia.org/wiki/Cron\n */\nexport class Cron {\n\tpublic cron: string;\n\tpublic normalized: string;\n\tpublic minutes: number[];\n\tpublic hours: number[];\n\tpublic days: number[];\n\tpublic months: number[];\n\tpublic dows: number[];\n\n\t/**\n\t * @param cron The cron pattern to use\n\t */\n\tpublic constructor(cron: string) {\n\t\tthis.cron = cron.toLowerCase();\n\t\tthis.normalized = Cron.normalize(this.cron);\n\t\t[this.minutes, this.hours, this.days, this.months, this.dows] = Cron.parseString(this.normalized);\n\t}\n\n\t/**\n\t * Get the next date that matches with the current pattern\n\t * @param outset The Date instance to compare with\n\t * @param origin Whether this next call is origin\n\t */\n\tpublic next(outset: Date = new Date(), origin = true): Date {\n\t\tif (!this.days.includes(outset.getUTCDate()) || !this.months.includes(outset.getUTCMonth() + 1) || !this.dows.includes(outset.getUTCDay())) {\n\t\t\treturn this.next(new Date(outset.getTime() + Time.Day), false);\n\t\t}\n\t\tif (!origin) return new Date(Date.UTC(outset.getUTCFullYear(), outset.getUTCMonth(), outset.getUTCDate(), this.hours[0], this.minutes[0]));\n\n\t\tconst now = new Date(outset.getTime() + 60000);\n\n\t\tfor (const hour of this.hours) {\n\t\t\tif (hour < now.getUTCHours()) continue;\n\t\t\tfor (const minute of this.minutes) {\n\t\t\t\tif (hour === now.getUTCHours() && minute < now.getUTCMinutes()) continue;\n\t\t\t\treturn new Date(Date.UTC(outset.getUTCFullYear(), outset.getUTCMonth(), outset.getUTCDate(), hour, minute));\n\t\t\t}\n\t\t}\n\n\t\treturn this.next(new Date(outset.getTime() + Time.Day), false);\n\t}\n\n\t/**\n\t * Normalize the pattern\n\t * @param cron The pattern to normalize\n\t */\n\tprivate static normalize(cron: string): string {\n\t\tif (Reflect.has(predefined, cron)) return Reflect.get(predefined, cron);\n\t\tconst now = new Date();\n\t\tcron = cron\n\t\t\t.split(' ')\n\t\t\t.map((val, i) =>\n\t\t\t\tval.replace(wildcardRegex, (match) => {\n\t\t\t\t\tif (match === 'h') return (Math.floor(Math.random() * allowedNum[i][1]) + allowedNum[i][0]).toString();\n\n\t\t\t\t\tif (match === '?') {\n\t\t\t\t\t\tswitch (i) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\treturn now.getUTCMinutes().toString();\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn now.getUTCHours().toString();\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn now.getUTCDate().toString();\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn now.getUTCMonth().toString();\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn now.getUTCDay().toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.join(' ');\n\t\treturn cron.replace(tokensRegex, (match) => String(Reflect.get(cronTokens, match)));\n\t}\n\n\t/**\n\t * Parse the pattern\n\t * @param cron The pattern to parse\n\t */\n\tprivate static parseString(cron: string): Array<number[]> {\n\t\tconst parts = cron.split(' ');\n\t\tif (parts.length !== 5) throw new Error('Invalid Cron Provided');\n\t\treturn parts.map((part, i) => Cron.parsePart(part, i));\n\t}\n\n\t/**\n\t * Parse the current part\n\t * @param cronPart The part of the pattern to parse\n\t * @param id The id that identifies the current part\n\t */\n\tprivate static parsePart(cronPart: string, id: number): number[] {\n\t\tif (cronPart.includes(',')) {\n\t\t\tconst res = [];\n\t\t\tfor (const part of cronPart.split(',')) res.push(...Cron.parsePart(part, id));\n\t\t\treturn [...new Set(res)].sort((a, b) => a - b);\n\t\t}\n\n\t\t// eslint-disable-next-line prefer-const\n\t\tconst [, wild, minStr, maxStr, step] = partRegex.exec(cronPart)!;\n\t\tlet [min, max] = [parseInt(minStr, 10), parseInt(maxStr, 10)];\n\n\t\t// If '*', set min and max as the minimum and maximum allowed numbers:\n\t\tif (wild) [min, max] = allowedNum[id];\n\t\t// Else if a number was given, but not a maximum nor a step, return it\n\t\t// as only allowed value:\n\t\telse if (!max && !step) return [min];\n\n\t\t// Set min and max as the given numbers, defaulting max to the maximum\n\t\t// allowed, so min is never bigger than max:\n\t\t// This makes min and max be, in the following cases (considering minutes):\n\t\t// -> 1-2 | 1..2\n\t\t// -> 2-1 | 1..2\n\t\t// -> 1/7 | 1, 8, 15, 22, 29, 36, 43, 50, 57\n\t\t[min, max] = [min, max || allowedNum[id][1]].sort((a, b) => a - b);\n\n\t\t// Generate a range\n\t\treturn range(min, max, parseInt(step, 10) || 1);\n\t}\n}\n","function arrayStrictEquals(e,n){if(e===n)return!0;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t]!==n[t]||typeof e[t]!=typeof n[t])return!1;return!0}function chunk(e,n){if(!Array.isArray(e))throw new TypeError(\"entries must be an array.\");if(!Number.isInteger(n))throw new TypeError(\"chunkSize must be an integer.\");if(n<1)throw new RangeError(\"chunkSize must be 1 or greater.\");const t=e.slice(),r=[];for(;t.length;)r.push(t.splice(0,n));return r}function classExtends(e,n){let t=e;for(;null!==t;){if(t===n)return!0;t=Object.getPrototypeOf(t)}return!1}const e=String.fromCharCode(8203);function codeBlock(n,t){return\"string\"==typeof t?0===t.length?`\\`\\`\\`${e}\\`\\`\\``:`\\`\\`\\`${n}\\n${t.replace(/```/,`\\`${e}\\`\\``).replace(/`$/g,`\\`${e}`)}\\`\\`\\``:`\\`\\`\\`${n}\\n${t||e}\\`\\`\\``}function splitText(e,n,t=\" \"){const r=e.substring(0,n).lastIndexOf(t),o=-1===r?n:r;return e.substring(0,o)}function cutText(e,n){if(e.length<n)return e;const t=splitText(e,n-3);return t.length<n-3?`${t}...`:`${t.slice(0,n-3)}...`}function debounce(e,n={}){var t;let r,o,i,u,c=0;const s=null!==(t=n.wait)&&void 0!==t?t:0,l=\"number\"==typeof n.maxWait?Math.max(n.maxWait,s):null;function invokeFunc(n){const t=r;return r=void 0,c=n,o=e(...t),o}function shouldInvoke(e){const n=e-u;return void 0===u||n>=s||n<0||null!==l&&e-c>=l}function timerExpired(){const e=Date.now();shouldInvoke(e)?trailingEdge(e):i=setTimeout(timerExpired,function remainingWait(e){const n=e-c,t=s-(e-u);return null===l?t:Math.min(t,l-n)}(e))}function trailingEdge(e){return i=void 0,invokeFunc(e)}function debounced(...e){const n=Date.now(),t=shouldInvoke(n);if(r=e,u=n,t){if(void 0===i)return function leadingEdge(e){return c=e,i=setTimeout(timerExpired,s),o}(u);if(null!==l)return i=setTimeout(timerExpired,s),invokeFunc(u)}return void 0===i&&(i=setTimeout(timerExpired,s)),o}return debounced.cancel=function cancel(){void 0!==i&&clearTimeout(i),c=0,r=void 0,u=void 0,i=void 0},debounced.flush=function flush(){return void 0===i?o:trailingEdge(Date.now())},debounced}function isObject(e){return!(\"object\"!=typeof e||!e)&&e.constructor===Object}const n=[\"string\",\"bigint\",\"number\",\"boolean\"];function isPrimitive(e){return n.includes(typeof e)}function deepClone(e){if(null===e||isPrimitive(e))return e;if(Array.isArray(e)){const n=[];for(const t of e)n.push(deepClone(t));return n}if(isObject(e)){const n={};for(const[t,r]of Object.entries(e))n[t]=deepClone(r);return n}if(e instanceof Map){const n=new e.constructor;for(const[t,r]of e.entries())n.set(t,deepClone(r));return n}if(e instanceof Set){const n=new e.constructor;for(const t of e.values())n.add(deepClone(t));return n}return e}const t=String.fromCharCode(8203);function inlineCodeBlock(e){return`\\`${e.replace(/ /g,\" \").replace(/`/g,`\\`${t}`)}\\``}function isClass(e){return\"function\"==typeof e&&\"object\"==typeof e.prototype}function isFunction(e){return\"function\"==typeof e}function isNullOrUndefined(e){return null==e}function isNumber(e){return\"number\"==typeof e&&!isNaN(e)&&Number.isFinite(e)}function isThenable(e){return\"object\"==typeof e&&null!==e&&(e instanceof Promise||e!==Promise.prototype&&function hasThen(e){return Reflect.has(e,\"then\")&&isFunction(e.then)}(e)&&function hasCatch(e){return Reflect.has(e,\"catch\")&&isFunction(e.catch)}(e))}function makeObject(e,n,t={}){if(e.includes(\".\")){const r=e.split(\".\"),o=r.pop();let i=t;for(const e of r)i[e]||(i[e]={}),i=i[e];i[o]=n}else t[e]=n;return t}function mergeDefault(e,n){if(!n)return deepClone(e);for(const[t,r]of Object.entries(e)){const e=Reflect.get(n,t);void 0===e?Reflect.set(n,t,deepClone(r)):isObject(e)&&Reflect.set(n,t,mergeDefault(null!=r?r:{},e))}return n}function mergeObjects(e,n){for(const[t,r]of Object.entries(n)){const n=Reflect.get(e,t);isObject(r)?Reflect.set(e,t,isObject(n)?mergeObjects(n,r):r):isObject(n)||Reflect.set(e,t,r)}return e}function noop(){}function objectToTuples(e,n=\"\"){const t=[];for(const[r,o]of Object.entries(e))isObject(o)?t.push(...objectToTuples(o,`${n}${r}.`)):t.push([`${n}${r}`,o]);return t}function parseURL(e){try{return new URL(e)}catch{return null}}function range(e,n,t){return new Array(Math.floor((n-e)/t)+1).fill(0).map(((n,r)=>e+r*t))}const r=/[-/\\\\^$*+?.()|[\\]{}]/g;function regExpEsc(e){return e.replace(r,\"\\\\$&\")}function roundNumber(e,n=0){if(!e.toString().includes(\"e\"))return Number(`${Math.round(Number(`${e}e+${n}`))}e-${n}`);const t=`${e}`.split(\"e\");let r=\"\";return Number(t[1])+n>0&&(r=\"+\"),Number(`${Math.round(Number(`${Number(t[0])}e${r}${Number(t[1])+n}`))}e-${n}`)}const o=/[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g,i={textchannel:\"TextChannel\",voicechannel:\"VoiceChannel\",categorychannel:\"CategoryChannel\",guildmember:\"GuildMember\"};function toTitleCase(e){return e.replace(o,(e=>i[e]||e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()))}function tryParse(e){try{return JSON.parse(e)}catch(n){return e}}export{arrayStrictEquals,chunk,classExtends,codeBlock,cutText,debounce,deepClone,inlineCodeBlock,isClass,isFunction,isNullOrUndefined,isNullOrUndefined as isNullish,isNumber,isObject,isPrimitive,isThenable,makeObject,mergeDefault,mergeObjects,noop,objectToTuples,parseURL,range,regExpEsc,roundNumber,splitText,toTitleCase,tryParse};\n//# sourceMappingURL=index.mjs.map\n","/* eslint-disable @typescript-eslint/restrict-plus-operands */\nconst tokens = new Map([\n\t['nanosecond', 1 / 1e6],\n\t['nanoseconds', 1 / 1e6],\n\t['ns', 1 / 1e6],\n\n\t['millisecond', 1],\n\t['milliseconds', 1],\n\t['ms', 1],\n\n\t['second', 1000],\n\t['seconds', 1000],\n\t['sec', 1000],\n\t['secs', 1000],\n\t['s', 1000],\n\n\t['minute', 1000 * 60],\n\t['minutes', 1000 * 60],\n\t['min', 1000 * 60],\n\t['mins', 1000 * 60],\n\t['m', 1000 * 60],\n\n\t['hour', 1000 * 60 * 60],\n\t['hours', 1000 * 60 * 60],\n\t['hr', 1000 * 60 * 60],\n\t['hrs', 1000 * 60 * 60],\n\t['h', 1000 * 60 * 60],\n\n\t['day', 1000 * 60 * 60 * 24],\n\t['days', 1000 * 60 * 60 * 24],\n\t['d', 1000 * 60 * 60 * 24],\n\n\t['week', 1000 * 60 * 60 * 24 * 7],\n\t['weeks', 1000 * 60 * 60 * 24 * 7],\n\t['wk', 1000 * 60 * 60 * 24 * 7],\n\t['wks', 1000 * 60 * 60 * 24 * 7],\n\t['w', 1000 * 60 * 60 * 24 * 7],\n\n\t['month', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['months', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['b', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['mo', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\n\t['year', 1000 * 60 * 60 * 24 * 365.25],\n\t['years', 1000 * 60 * 60 * 24 * 365.25],\n\t['yr', 1000 * 60 * 60 * 24 * 365.25],\n\t['yrs', 1000 * 60 * 60 * 24 * 365.25],\n\t['y', 1000 * 60 * 60 * 24 * 365.25]\n]);\n\n/**\n * Converts duration strings into ms and future dates\n */\nexport class Duration {\n\t/**\n\t * The offset\n\t */\n\tpublic offset: number;\n\n\t/**\n\t * Create a new Duration instance\n\t * @param pattern The string to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.offset = Duration.parse(pattern.toLowerCase());\n\t}\n\n\t/**\n\t * Get the date from now\n\t */\n\tpublic get fromNow(): Date {\n\t\treturn this.dateFrom(new Date());\n\t}\n\n\t/**\n\t * Get the date from\n\t * @param date The Date instance to get the date from\n\t */\n\tpublic dateFrom(date: Date): Date {\n\t\treturn new Date(date.getTime() + this.offset);\n\t}\n\n\t/**\n\t * The RegExp used for the pattern parsing\n\t */\n\tprivate static readonly kPatternRegex = /(-?\\d*\\.?\\d+(?:e[-+]?\\d+)?)\\s*([a-zμ]*)/gi;\n\n\t/**\n\t * The RegExp used for removing commas\n\t */\n\tprivate static readonly kCommaRegex = /,/g;\n\n\t/**\n\t * The RegExp used for replacing a/an with 1\n\t */\n\tprivate static readonly kAanRegex = /\\ban?\\b/gi;\n\n\t/**\n\t * Parse the pattern\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): number {\n\t\tlet result = 0;\n\n\t\tpattern\n\t\t\t// ignore commas\n\t\t\t.replace(Duration.kCommaRegex, '')\n\t\t\t// a / an = 1\n\t\t\t.replace(Duration.kAanRegex, '1')\n\t\t\t// do math\n\t\t\t.replace(Duration.kPatternRegex, (_, i, units) => {\n\t\t\t\tunits = tokens.get(units) ?? 0;\n\t\t\t\tresult += Number(i) * units;\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\treturn result;\n\t}\n}\n","import { DEFAULT_UNITS, TimeTypes } from './constants';\n\n/**\n * The duration of each time type in milliseconds\n */\nconst kTimeDurations: readonly [TimeTypes, number][] = [\n\t[TimeTypes.Year, 31536000000],\n\t// 29.53059 days is the official duration of a month: https://en.wikipedia.org/wiki/Month\n\t[TimeTypes.Month, 2628000000],\n\t[TimeTypes.Week, 1000 * 60 * 60 * 24 * 7],\n\t[TimeTypes.Day, 1000 * 60 * 60 * 24],\n\t[TimeTypes.Hour, 1000 * 60 * 60],\n\t[TimeTypes.Minute, 1000 * 60],\n\t[TimeTypes.Second, 1000]\n];\n\n/**\n * Display the duration\n * @param duration The duration in milliseconds to parse and display\n * @param assets The language assets\n */\nexport class DurationFormatter {\n\tpublic constructor(public units: DurationFormatAssetsTime = DEFAULT_UNITS) {}\n\n\tpublic format(duration: number, precision = 7) {\n\t\tconst output: string[] = [];\n\t\tconst negative = duration < 0;\n\t\tif (negative) duration *= -1;\n\n\t\tfor (const [type, timeDuration] of kTimeDurations) {\n\t\t\tconst substraction = duration / timeDuration;\n\t\t\tif (substraction < 1) continue;\n\n\t\t\tconst floored = Math.floor(substraction);\n\t\t\tduration -= floored * timeDuration;\n\t\t\toutput.push(addUnit(floored, this.units[type]));\n\n\t\t\t// If the output has enough precision, break\n\t\t\tif (output.length >= precision) break;\n\t\t}\n\n\t\treturn `${negative ? '-' : ''}${output.join(' ') || addUnit(0, this.units.second)}`;\n\t}\n}\n\n/**\n * Adds an unit, if non zero\n * @param time The duration of said unit\n * @param unit The unit language assets\n */\nfunction addUnit(time: number, unit: DurationFormatAssetsUnit) {\n\tif (Reflect.has(unit, time)) return `${time} ${Reflect.get(unit, time)}`;\n\treturn `${time} ${unit.DEFAULT}`;\n}\n\ninterface DurationFormatAssetsUnit extends Record<number, string> {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tDEFAULT: string;\n}\n\nexport interface DurationFormatAssetsTime {\n\t[TimeTypes.Second]: DurationFormatAssetsUnit;\n\t[TimeTypes.Minute]: DurationFormatAssetsUnit;\n\t[TimeTypes.Hour]: DurationFormatAssetsUnit;\n\t[TimeTypes.Day]: DurationFormatAssetsUnit;\n\t[TimeTypes.Week]: DurationFormatAssetsUnit;\n\t[TimeTypes.Month]: DurationFormatAssetsUnit;\n\t[TimeTypes.Year]: DurationFormatAssetsUnit;\n}\n","/**\n * Manages timers so that this application can be cleanly exited\n */\nexport class TimerManager extends null {\n\t/**\n\t * A set of timeouts to clear on destroy\n\t */\n\tprivate static storedTimeouts = new Set<NodeJS.Timeout>();\n\n\t/**\n\t * A set of intervals to clear on destroy\n\t */\n\tprivate static storedIntervals = new Set<NodeJS.Timeout>();\n\n\t/**\n\t * Creates a timeout gets cleared when destroyed\n\t * @param fn callback function\n\t * @param delay amount of time before running the callback\n\t * @param args additional arguments to pass back to the callback\n\t */\n\tpublic static setTimeout<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout {\n\t\tconst timeout = setTimeout(() => {\n\t\t\tthis.storedTimeouts.delete(timeout);\n\t\t\tfn(...args);\n\t\t}, delay);\n\t\tthis.storedTimeouts.add(timeout);\n\t\treturn timeout;\n\t}\n\n\t/**\n\t * Clears a timeout created through this class\n\t * @param timeout The timeout to clear\n\t */\n\tpublic static clearTimeout(timeout: NodeJS.Timeout): void {\n\t\tclearTimeout(timeout);\n\t\tthis.storedTimeouts.delete(timeout);\n\t}\n\n\t/**\n\t * Creates an interval gets cleared when destroyed\n\t * @param fn callback function\n\t * @param delay amount of time before running the callback\n\t * @param args additional arguments to pass back to the callback\n\t */\n\tpublic static setInterval<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout {\n\t\tconst interval = setInterval(fn, delay, ...args);\n\t\tthis.storedIntervals.add(interval);\n\t\treturn interval;\n\t}\n\n\t/**\n\t * Clears an internal created through this class\n\t * @param interval The interval to clear\n\t */\n\tpublic static clearInterval(interval: NodeJS.Timeout): void {\n\t\tclearInterval(interval);\n\t\tthis.storedIntervals.delete(interval);\n\t}\n\n\t/**\n\t * Clears running timeouts and intervals created through this class so NodeJS can gracefully exit\n\t */\n\tpublic static destroy(): void {\n\t\tfor (const i of this.storedTimeouts) clearTimeout(i);\n\t\tfor (const i of this.storedIntervals) clearInterval(i);\n\t\tthis.storedTimeouts.clear();\n\t\tthis.storedIntervals.clear();\n\t}\n}\n","import { days, months, Time, tokens } from './constants';\n\ninterface TokenResolver {\n\t(time: Date): string;\n}\n\nconst tokenResolvers = new Map<string, TokenResolver>([\n\t// Dates\n\t['Y', (time) => String(time.getFullYear()).slice(2)],\n\t['YY', (time) => String(time.getFullYear()).slice(2)],\n\t['YYY', (time) => String(time.getFullYear())],\n\t['YYYY', (time) => String(time.getFullYear())],\n\t['Q', (time) => String((time.getMonth() + 1) / 3)],\n\t['M', (time) => String(time.getMonth() + 1)],\n\t['MM', (time) => String(time.getMonth() + 1).padStart(2, '0')],\n\t['MMM', (time) => months[time.getMonth()]],\n\t['MMMM', (time) => months[time.getMonth()]],\n\t['D', (time) => String(time.getDate())],\n\t['DD', (time) => String(time.getDate()).padStart(2, '0')],\n\t['DDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t['DDDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t[\n\t\t'd',\n\t\t(time) => {\n\t\t\tconst day = String(time.getDate());\n\t\t\tif (day !== '11' && day.endsWith('1')) return `${day}st`;\n\t\t\tif (day !== '12' && day.endsWith('2')) return `${day}nd`;\n\t\t\tif (day !== '13' && day.endsWith('3')) return `${day}rd`;\n\t\t\treturn `${day}th`;\n\t\t}\n\t],\n\t['dd', (time) => days[time.getDay()].slice(0, 2)],\n\t['ddd', (time) => days[time.getDay()].slice(0, 3)],\n\t['dddd', (time) => days[time.getDay()]],\n\t['X', (time) => String(time.valueOf() / Time.Second)],\n\t['x', (time) => String(time.valueOf())],\n\n\t// Locales\n\t['H', (time) => String(time.getHours())],\n\t['HH', (time) => String(time.getHours()).padStart(2, '0')],\n\t['h', (time) => String(time.getHours() % 12 || 12)],\n\t['hh', (time) => String(time.getHours() % 12 || 12).padStart(2, '0')],\n\t['a', (time) => (time.getHours() < 12 ? 'am' : 'pm')],\n\t['A', (time) => (time.getHours() < 12 ? 'AM' : 'PM')],\n\t['m', (time) => String(time.getMinutes())],\n\t['mm', (time) => String(time.getMinutes()).padStart(2, '0')],\n\t['s', (time) => String(time.getSeconds())],\n\t['ss', (time) => String(time.getSeconds()).padStart(2, '0')],\n\t['S', (time) => String(time.getMilliseconds())],\n\t['SS', (time) => String(time.getMilliseconds()).padStart(2, '0')],\n\t['SSS', (time) => String(time.getMilliseconds()).padStart(3, '0')],\n\t['T', (time) => `${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`],\n\t[\n\t\t't',\n\t\t(time) =>\n\t\t\t`${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')}:${String(time.getSeconds()).padStart(2, '0')} ${\n\t\t\t\ttime.getHours() < 12 ? 'am' : 'pm'\n\t\t\t}`\n\t],\n\t['L', (time) => `${String(time.getMonth() + 1).padStart(2, '0')}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['l', (time) => `${String(time.getMonth() + 1)}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['LL', (time) => `${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t['ll', (time) => `${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t[\n\t\t'LLL',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'lll',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'LLLL',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()]}, ${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'llll',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()].slice(0, 3)} ${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(\n\t\t\t\ttime.getFullYear()\n\t\t\t)} ${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'Z',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t],\n\t[\n\t\t'ZZ',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t]\n]);\n/* eslint-enable max-len */\n\nexport type TimeResolvable = Date | number | string;\n\nexport interface TimestampTemplateEntry {\n\ttype: string;\n\tcontent: string | null;\n}\n\n/**\n * Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.\n */\nexport class Timestamp {\n\t/**\n\t * The raw pattern\n\t * @since 1.0.0\n\t */\n\tpublic pattern: string;\n\n\t/**\n\t * @since 1.0.0\n\t */\n\tprivate template: TimestampTemplateEntry[];\n\n\t/**\n\t * Starts a new Timestamp and parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display\n\t */\n\tpublic display(time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(this.template, time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display in utc\n\t */\n\tpublic displayUTC(time?: TimeResolvable): string {\n\t\treturn Timestamp.display(this.template, Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Edits the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The new pattern for this instance\n\t * @chainable\n\t */\n\tpublic edit(pattern: string): this {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Defines the toString behavior of Timestamp.\n\t */\n\tpublic toString(): string {\n\t\treturn this.display();\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayUTCArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Creates a UTC Date object to work with.\n\t * @since 1.0.0\n\t * @param time The date to convert to utc\n\t */\n\tpublic static utc(time: Date | number | string = new Date()): Date {\n\t\ttime = Timestamp.resolveDate(time);\n\t\treturn new Date(time.valueOf() + time.getTimezoneOffset() * 60000);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param template The pattern to parse\n\t * @param time The time to display\n\t */\n\tprivate static display(template: TimestampTemplateEntry[], time: Date | number | string): string {\n\t\tlet output = '';\n\t\tconst parsedTime = Timestamp.resolveDate(time);\n\t\tfor (const { content, type } of template) output += content || tokenResolvers.get(type)!(parsedTime);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): TimestampTemplateEntry[] {\n\t\tconst template: TimestampTemplateEntry[] = [];\n\t\tfor (let i = 0; i < pattern.length; i++) {\n\t\t\tlet current = '';\n\t\t\tconst currentChar = pattern[i];\n\t\t\tconst tokenMax = tokens.get(currentChar);\n\t\t\tif (typeof tokenMax === 'number') {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (pattern[i + 1] === currentChar && current.length < tokenMax) current += pattern[++i];\n\t\t\t\ttemplate.push({ type: current, content: null });\n\t\t\t} else if (currentChar === '[') {\n\t\t\t\twhile (i + 1 < pattern.length && pattern[i + 1] !== ']') current += pattern[++i];\n\t\t\t\ti++;\n\t\t\t\ttemplate.push({ type: 'literal', content: current || '[' });\n\t\t\t} else {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (i + 1 < pattern.length && !tokens.has(pattern[i + 1]) && pattern[i + 1] !== '[') current += pattern[++i];\n\t\t\t\ttemplate.push({ type: 'literal', content: current });\n\t\t\t}\n\t\t}\n\n\t\treturn template;\n\t}\n\n\t/**\n\t * Resolves a date.\n\t * @since 1.0.0\n\t * @param time The time to parse\n\t */\n\tprivate static resolveDate(time: TimeResolvable): Date {\n\t\treturn time instanceof Date ? time : new Date(time);\n\t}\n}\n"],"names":["TimeTypes","Time","days","months","tokens","Map","partRegex","wildcardRegex","allowedNum","predefined","@annually","@yearly","@monthly","@weekly","@daily","@hourly","cronTokens","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","sun","mon","tue","wed","thu","fri","sat","tokensRegex","RegExp","Object","keys","join","DEFAULT_UNITS","year","1","DEFAULT","month","week","day","hour","minute","second","Cron","[object Object]","cron","this","toLowerCase","normalized","normalize","minutes","hours","dows","parseString","outset","Date","origin","includes","getUTCDate","getUTCMonth","getUTCDay","next","getTime","UTC","getUTCFullYear","now","getUTCHours","getUTCMinutes","Reflect","has","get","split","map","val","i","replace","match","Math","floor","random","toString","String","parts","length","Error","part","parsePart","cronPart","id","res","push","Set","sort","a","b","wild","minStr","maxStr","step","exec","min","max","parseInt","range","e","n","t","Array","fill","r","Duration","pattern","offset","parse","fromNow","dateFrom","date","result","kCommaRegex","kAanRegex","kPatternRegex","_","units","Number","kTimeDurations","addUnit","time","unit","TimerManager","fn","delay","args","timeout","setTimeout","storedTimeouts","delete","add","clearTimeout","interval","setInterval","storedIntervals","clearInterval","clear","tokenResolvers","getFullYear","slice","getMonth","padStart","getDate","endsWith","getDay","valueOf","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","unsigned","absolute","abs","Timestamp","template","display","utc","resolveDate","output","parsedTime","content","type","current","currentChar","tokenMax","DurationFormatter","duration","precision","negative","timeDuration","substraction","floored"],"mappings":"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"}