{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["const { getPromiseDetails, getProxyDetails } =\n\ttypeof process === 'undefined'\n\t\t? {\n\t\t\t\tgetPromiseDetails: () => undefined,\n\t\t\t\tgetProxyDetails: () => undefined\n\t\t  }\n\t\t: // @ts-ignore process.binding exists\n\t\t  process.binding('util');\n\n/**\n * The class for deep checking Types\n */\nexport class Type {\n\t/**\n\t * The value to generate a deep Type of\n\t */\n\tpublic readonly value: unknown;\n\n\t/**\n\t * The shallow type of this\n\t */\n\tpublic is: string;\n\n\t/**\n\t * The parent of this Type\n\t */\n\tprivate readonly parent: Type | null;\n\n\t/**\n\t * The child keys of this Type\n\t */\n\tprivate readonly childKeys = new Map<string, Type>();\n\n\t/**\n\t * The child values of this Type\n\t */\n\tprivate readonly childValues = new Map<string, Type>();\n\n\t/**\n\t * @param value The value to generate a deep Type of\n\t * @param parent The parent value used in recursion\n\t */\n\tpublic constructor(value: unknown, parent: Type | null = null) {\n\t\tthis.value = value;\n\t\tthis.is = Type.resolve(value);\n\t\tthis.parent = parent;\n\t}\n\n\t/**\n\t * The type string for the children of this Type\n\t */\n\tprivate get childTypes(): string {\n\t\tif (!this.childValues.size) return '';\n\t\treturn `<${(this.childKeys.size ? `${Type.list(this.childKeys)}, ` : '') + Type.list(this.childValues)}>`;\n\t}\n\n\t/**\n\t * The full type string generated.\n\t */\n\tpublic toString(): string {\n\t\tthis.check();\n\t\treturn `${this.is}${this.childTypes}`;\n\t}\n\n\t/**\n\t * Walks the linked list backwards, for checking circulars.\n\t */\n\tprivate *parents(): Generator<Type, void, unknown> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias, no-cond-assign, consistent-this\n\t\tlet current: Type | null = this;\n\t\t// eslint-disable-next-line no-cond-assign\n\t\twhile ((current = current.parent)) yield current;\n\t}\n\n\t/**\n\t * Checks if the value of this Type is a circular reference to any parent.\n\t */\n\tprivate isCircular(): boolean {\n\t\tfor (const parent of this.parents()) if (parent.value === this.value) return true;\n\t\treturn false;\n\t}\n\n\t/**\n\t * The subtype to create based on this.value's sub value.\n\t * @param value The sub value\n\t */\n\tprivate addValue(value: unknown): void {\n\t\tconst child = new Type(value, this);\n\t\tthis.childValues.set(child.is, child);\n\t}\n\n\t/**\n\t * The subtype to create based on this.value's entries.\n\t * @param entry The entry\n\t */\n\tprivate addEntry([key, value]: [string, unknown]): void {\n\t\tconst child = new Type(key, this);\n\t\tthis.childKeys.set(child.is, child);\n\t\tthis.addValue(value);\n\t}\n\n\t/**\n\t * Get the deep type name that defines the input.\n\t */\n\tprivate check(): void {\n\t\tif (Object.isFrozen(this)) return;\n\n\t\tconst promise = getPromiseDetails(this.value);\n\t\tconst proxy = getProxyDetails(this.value);\n\t\tif (typeof this.value === 'object' && this.isCircular()) {\n\t\t\tthis.is = `[Circular:${this.is}]`;\n\t\t} else if (promise && promise[0]) {\n\t\t\tthis.addValue(promise[1]);\n\t\t} else if (proxy && proxy[0]) {\n\t\t\tthis.is = 'Proxy';\n\t\t\tthis.addValue(proxy[0]);\n\t\t} else if (this.value instanceof Map) {\n\t\t\tfor (const entry of this.value) this.addEntry(entry);\n\t\t} else if (Array.isArray(this.value) || this.value instanceof Set) {\n\t\t\tfor (const value of this.value) this.addValue(value);\n\t\t} else if (this.is === 'Object') {\n\t\t\tthis.is = 'Record';\n\t\t\tfor (const entry of Object.entries(this.value as Record<PropertyKey, unknown>)) this.addEntry(entry);\n\t\t}\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Resolves the type name that defines the input.\n\t * @param value The value to get the type name of\n\t */\n\tpublic static resolve(value: any): string {\n\t\tconst type = typeof value;\n\t\tswitch (type) {\n\t\t\tcase 'object':\n\t\t\t\treturn value === null ? 'null' : value.constructor && value.constructor.name;\n\t\t\tcase 'function':\n\t\t\t\treturn `${value.constructor.name}(${value.length}-arity)`;\n\t\t\tcase 'undefined':\n\t\t\t\treturn 'void';\n\t\t\tdefault:\n\t\t\t\treturn type;\n\t\t}\n\t}\n\n\t/**\n\t * Joins the list of child types.\n\t * @param values The values to list\n\t */\n\tprivate static list(values: Map<string, Type>): string {\n\t\treturn [...values.values()].sort().join(' | ');\n\t}\n}\n"],"names":[],"mappings":"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"}