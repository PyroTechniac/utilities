{"version":3,"file":"index.mjs","sources":["../src/lib/builders/MessageBuilder.ts","../src/lib/PaginatedMessage.ts","../src/lib/LazyPaginatedMessage.ts","../src/lib/MessagePrompter/constants.ts","../src/lib/MessagePrompter/strategies/MessagePrompterBaseStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterConfirmStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterMessageStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterNumberStrategy.ts","../src/lib/MessagePrompter/strategies/MessagePrompterReactionStrategy.ts","../src/lib/MessagePrompter/MessagePrompter.ts","../src/lib/type-guards.ts"],"sourcesContent":["import type { MessageEmbed, MessageMentionOptions, MessageOptions } from 'discord.js';\n\n/**\n * Exclude null and undefined from T\n */\ntype Defined<T> = T extends undefined ? never : T;\n\nexport type MessageBuilderFileResolvable = Defined<MessageOptions['files']>[number];\nexport type MessageBuilderCodeResolvable = Defined<MessageOptions['code']>;\nexport type MessageBuilderSplitResolvable = Defined<MessageOptions['split']>;\nexport type MessageBuilderResolvable = Omit<MessageOptions, 'embed' | 'disableMentions' | 'reply'> & { embed?: MessageEmbed };\n\n/**\n * A message builder class, it implements the {@link https://discord.js.org/#/docs/main/stable/typedef/MessageOptions MessageOptions}\n * interface.\n */\nexport class MessageBuilder implements MessageOptions {\n\t/**\n\t * Whether or not the message should be spoken aloud.\n\t * @default false\n\t */\n\tpublic tts?: boolean;\n\n\t/**\n\t * The nonce for the message.\n\t * @default ''\n\t */\n\tpublic nonce?: string;\n\n\t/**\n\t * The content for the message. If set to undefined and the builder is used to edit, the content will not be\n\t * replaced.\n\t */\n\tpublic content?: string;\n\n\t/**\n\t * An embed for the message. If set to undefined and the builder is used to edit, the embed will not be replaced.\n\t */\n\tpublic embed?: MessageEmbed;\n\n\t/**\n\t * Which mentions should be parsed from the message content.\n\t */\n\tpublic allowedMentions?: MessageMentionOptions;\n\n\t/**\n\t * Files to send with the message. This should not be set when editing a message, as Discord does not support\n\t * editing file attachments.\n\t */\n\tpublic files?: MessageBuilderFileResolvable[];\n\n\t/**\n\t * Language for optional codeblock formatting to apply.\n\t */\n\tpublic code?: MessageBuilderCodeResolvable;\n\n\t/**\n\t * Whether or not the message should be split into multiple messages if it exceeds the character limit. If an object\n\t * is provided, these are the options for splitting the message.\n\t */\n\tpublic split?: MessageBuilderSplitResolvable;\n\n\tpublic constructor(options?: MessageBuilderResolvable) {\n\t\tthis.tts = options?.tts ?? MessageBuilder.defaults.tts;\n\t\tthis.nonce = options?.nonce ?? MessageBuilder.defaults.nonce;\n\t\tthis.content = options?.content ?? MessageBuilder.defaults.content;\n\t\tthis.embed = options?.embed ?? MessageBuilder.defaults.embed;\n\t\tthis.allowedMentions = options?.allowedMentions ?? MessageBuilder.defaults.allowedMentions;\n\t\tthis.files = options?.files ?? MessageBuilder.defaults.files;\n\t\tthis.code = options?.code ?? MessageBuilder.defaults.code;\n\t\tthis.split = options?.split ?? MessageBuilder.defaults.split;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.tts]] field.\n\t * @param tts Whether or not the message should be spoken aloud.\n\t */\n\tpublic setTTS(tts?: boolean): this {\n\t\tthis.tts = tts;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.nonce]] field.\n\t * @param nonce The nonce for the message.\n\t */\n\tpublic setNonce(nonce?: string): this {\n\t\tthis.nonce = nonce;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.content]] field.\n\t * @param content The content for the message. If set to undefined and the builder is used to edit, the content will\n\t * not be replaced.\n\t */\n\tpublic setContent(content?: string): this {\n\t\tthis.content = content;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.embed]] field.\n\t * @param embed An embed for the message. If set to undefined and the builder is used to edit, the embed will not be\n\t * replaced.\n\t */\n\tpublic setEmbed(embed?: MessageEmbed): this {\n\t\tthis.embed = embed;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.allowedMentions]] field.\n\t * @param allowedMentions Which mentions should be parsed from the message content.\n\t */\n\tpublic setAllowedMentions(allowedMentions?: MessageMentionOptions): this {\n\t\tthis.allowedMentions = allowedMentions;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new value for the [[MessageBuilder.files]] field array.\n\t * @param file The file to add to the [[MessageBuilder.files]] field array.\n\t */\n\tpublic addFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = this.files?.concat(file) ?? [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a single value for the [[MessageBuilder.files]] field array.\n\t * @param file The file to send with the message. This should not be set when editing a message, as Discord does not\n\t * support editing file attachments.\n\t */\n\tpublic setFile(file: MessageBuilderFileResolvable): this {\n\t\tthis.files = [file];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.files]] field.\n\t * @param files The files to send with the message. This should not be set when editing a message, as Discord does\n\t * not support editing file attachments.\n\t */\n\tpublic setFiles(files?: MessageBuilderFileResolvable[]): this {\n\t\tthis.files = files;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.code]] field.\n\t * @param code Language for optional codeblock formatting to apply.\n\t */\n\tpublic setCode(code?: MessageBuilderCodeResolvable): this {\n\t\tthis.code = code;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for the [[MessageBuilder.split]] field.\n\t * @param split Whether or not the message should be split into multiple messages if it exceeds the character limit.\n\t * If an object is provided, these are the options for splitting the message.\n\t */\n\tpublic setSplit(split?: MessageBuilderSplitResolvable): this {\n\t\tthis.split = split;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The default values for all MessageBuilder instances.\n\t */\n\tpublic static defaults: MessageBuilderResolvable = {};\n}\n","import { APIMessage, Message, MessageOptions, MessageReaction, NewsChannel, ReactionCollector, TextChannel, User } from 'discord.js';\n\n/**\n * This is a [[PaginatedMessage]], a utility to paginate messages (usually embeds).\n * You must either use this class directly or extend it.\n *\n * [[PaginatedMessage]] uses actions, these are essentially reaction emojis, when triggered run the said action.\n * You can utilize your own actions, or you can use the [[PaginatedMessage.defaultActions]].\n * [[PaginatedMessage.defaultActions]] is also static so you can modify these directly.\n *\n * [[PaginatedMessage]] also uses pages, these are simply {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessages}.\n *\n * @example\n * ```typescript\n * const handler = new PaginatedMessage();\n * ```\n *\n * @example\n * ```typescript\n * // To utilize actions you can use the IPaginatedMessageAction by implementing it into a class.\n * // [[PaginatedMessage]] requires you to have the class initialized using `new`.\n *\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction = {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }```\n *\n */\nexport class PaginatedMessage {\n\t/**\n\t * The pages to be converted to [[PaginatedMessage.messages]]\n\t */\n\tpublic pages: MessagePage[];\n\n\t/**\n\t * The response message used to edit on page changes.\n\t */\n\tpublic response: Message | null = null;\n\n\t/**\n\t * The collector used for handling reactions.\n\t */\n\tpublic collector: ReactionCollector | null = null;\n\n\t/**\n\t * The pages which were converted from [[PaginatedMessage.pages]]\n\t */\n\tpublic messages: (APIMessage | null)[] = [];\n\n\t/**\n\t * The actions which are to be used.\n\t */\n\tpublic actions = new Map<string, IPaginatedMessageAction>();\n\n\t/**\n\t * The handler's current page/message index.\n\t */\n\tpublic index = 0;\n\n\t/**\n\t * The amount of time to idle before the paginator is closed. Defaults to `20 * 1000`.\n\t */\n\tpublic idle = 20 * 1000;\n\n\t/**\n\t * Constructor for the [[PaginatedMessage]] class\n\t * @param __namedParameters The [[PaginatedMessageOptions]] for this instance of the [[PaginatedMessage]] class\n\t */\n\tpublic constructor({ pages, actions }: PaginatedMessageOptions = {}) {\n\t\tthis.pages = pages ?? [];\n\n\t\tfor (const page of this.pages) this.messages.push(page instanceof APIMessage ? page : null);\n\t\tfor (const action of actions ?? this.constructor.defaultActions) this.actions.set(action.id, action);\n\t}\n\n\t/**\n\t * Sets the handler's current page/message index.\n\t * @param index The number to set the index to.\n\t */\n\tpublic setIndex(index: number): this {\n\t\tthis.index = index;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the amount of time to idle before the paginator is closed.\n\t * @param idle The number to set the idle to.\n\t */\n\tpublic setIdle(idle: number): this {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears all current actions and sets them. The order given is the order they will be used.\n\t * @param actions The actions to set.\n\t */\n\tpublic setActions(actions: IPaginatedMessageAction[]): this {\n\t\tthis.actions.clear();\n\t\treturn this.addActions(actions);\n\t}\n\n\t/**\n\t * Adds actions to the existing ones. The order given is the order they will be used.\n\t * @param actions The actions to add.\n\t */\n\tpublic addActions(actions: IPaginatedMessageAction[]): this {\n\t\tfor (const action of actions) this.addAction(action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an action to the existing ones. This will be added as the last action.\n\t * @param action The action to add.\n\t */\n\tpublic addAction(action: IPaginatedMessageAction): this {\n\t\tthis.actions.set(action.id, action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks whether or not the handler has a specific page.\n\t * @param index The index to check.\n\t */\n\tpublic hasPage(index: number): boolean {\n\t\treturn index >= 0 && index < this.pages.length;\n\t}\n\n\t/**\n\t * Clears all current pages and messages and sets them. The order given is the order they will be used.\n\t * @param pages The pages to set.\n\t */\n\tpublic setPages(pages: MessagePage[]) {\n\t\tthis.pages = [];\n\t\tthis.messages = [];\n\t\tthis.addPages(pages);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a page to the existing ones. This will be added as the last page.\n\t * @param page The page to add.\n\t */\n\tpublic addPage(page: MessagePage): this {\n\t\tthis.pages.push(page);\n\t\tthis.messages.push(page instanceof APIMessage ? page : null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add pages to the existing ones. The order given is the order they will be used.\n\t * @param pages The pages to add.\n\t */\n\tpublic addPages(pages: MessagePage[]): this {\n\t\tfor (const page of pages) this.addPage(page);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executes the [[PaginatedMessage]] and sends the pages corresponding with [[PaginatedMessage.index]].\n\t * The handler will start collecting reactions and running actions once all actions have been reacted to the message.\n\t * @param author The author to validate.\n\t * @param channel The channel to use.\n\t */\n\tpublic async run(author: User, channel: TextChannel | NewsChannel): Promise<this> {\n\t\tawait this.resolvePagesOnRun(channel);\n\n\t\t// Sanity checks to handle\n\t\tif (!this.messages.length) throw new Error('There are no messages.');\n\t\tif (!this.actions.size) throw new Error('There are no messages.');\n\n\t\tawait this.setUpMessage(channel, author);\n\t\tawait this.setUpReactions(channel, author);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Executed whenever [[PaginatedMessage.run]] is called.\n\t */\n\tpublic async resolvePagesOnRun(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tfor (let i = 0; i < this.pages.length; i++) await this.resolvePage(channel, i);\n\t}\n\n\t/**\n\t * Executed whenever an action is triggered and resolved.\n\t * @param index The index to resolve.\n\t */\n\tpublic async resolvePage(channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\t// If the message was already processed, do not load it again:\n\t\tconst message = this.messages[index];\n\t\tif (message !== null) return message;\n\n\t\t// Load the page and return it:\n\t\tconst resolved = await this.handlePageLoad(this.pages[index], channel, index);\n\t\tthis.messages[index] = resolved;\n\n\t\treturn resolved;\n\t}\n\n\t/**\n\t * Clones the current handler into a new instance.\n\t */\n\tpublic clone(): PaginatedMessage {\n\t\tconst clone = new this.constructor({ pages: this.pages, actions: [] }).setIndex(this.index).setIdle(this.idle);\n\t\tclone.actions = this.actions;\n\t\tclone.response = this.response;\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Sets up the message.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpMessage(channel: TextChannel | NewsChannel, author: User): Promise<void>;\n\tprotected async setUpMessage(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tconst firstPage = this.messages[this.index]!;\n\t\tif (this.response) await this.response.edit(firstPage);\n\t\telse this.response = (await channel.send(firstPage)) as Message;\n\t}\n\n\t/**\n\t * Sets up the message's reactions and the collector.\n\t * @param channel The channel the handler is running at.\n\t * @param author The author the handler is for.\n\t */\n\tprotected async setUpReactions(channel: TextChannel | NewsChannel, author: User): Promise<void> {\n\t\tthis.collector = this.response!.createReactionCollector(\n\t\t\t(reaction: MessageReaction, user: User) =>\n\t\t\t\tuser.id === author.id && (this.actions.has(reaction.emoji.identifier) || this.actions.has(reaction.emoji.name)),\n\t\t\t{ idle: this.idle }\n\t\t)\n\t\t\t.on('collect', this.handleCollect.bind(this, author, channel))\n\t\t\t.on('end', this.handleEnd.bind(this));\n\n\t\tfor (const id of this.actions.keys()) {\n\t\t\tif (this.collector.ended) break;\n\t\t\tawait this.response!.react(id);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the load of a page.\n\t * @param page The page to be loaded.\n\t * @param channel The channel the paginated message runs at.\n\t * @param index The index of the current page.\n\t */\n\tprotected async handlePageLoad(page: MessagePage, channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\tconst options = typeof page === 'function' ? await page(index, this.pages, this) : page;\n\t\treturn (options instanceof APIMessage ? options : new APIMessage(channel, options)).resolveData();\n\t}\n\n\t/**\n\t * Handles the `collect` event from the collector.\n\t * @param author The the handler is for.\n\t * @param channel The channel the handler is running at.\n\t * @param reaction The reaction that was received.\n\t * @param user The user that reacted to the message.\n\t */\n\tprotected async handleCollect(author: User, channel: TextChannel | NewsChannel, reaction: MessageReaction, user: User): Promise<void> {\n\t\tawait reaction.users.remove(user);\n\n\t\tconst action = (this.actions.get(reaction.emoji.identifier) ?? this.actions.get(reaction.emoji.name))!;\n\t\tconst previousIndex = this.index;\n\n\t\tawait action.run({\n\t\t\thandler: this,\n\t\t\tauthor,\n\t\t\tchannel,\n\t\t\tresponse: this.response!,\n\t\t\tcollector: this.collector!\n\t\t});\n\n\t\tif (previousIndex !== this.index) {\n\t\t\tawait this.response?.edit(await this.resolvePage(channel, this.index));\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `end` event from the collector.\n\t * @param reason The reason for which the collector was ended.\n\t */\n\tprotected async handleEnd(reason: string): Promise<void> {\n\t\t// Remove all listeners from the collector:\n\t\tthis.collector?.removeAllListeners();\n\n\t\t// Do not remove reactions if the message, channel, or guild, was deleted:\n\t\tif (this.response && !PaginatedMessage.deletionStopReasons.includes(reason)) {\n\t\t\tawait this.response.reactions.removeAll();\n\t\t}\n\t}\n\n\t/**\n\t * The default actions of this handler.\n\t */\n\tpublic static defaultActions: IPaginatedMessageAction[] = [\n\t\t{\n\t\t\tid: '🔢',\n\t\t\trun: async ({ handler, author, channel }) => {\n\t\t\t\tconst questionMessage = await channel.send('What page would you like to jump to?');\n\t\t\t\tconst collected = await channel\n\t\t\t\t\t.awaitMessages((message: Message) => message.author.id === author.id, { max: 1, idle: 15 * 1000 })\n\t\t\t\t\t.catch(() => null);\n\n\t\t\t\tif (collected) {\n\t\t\t\t\tconst responseMessage = collected.first();\n\n\t\t\t\t\tif (questionMessage.deletable) await questionMessage.delete();\n\t\t\t\t\tif (responseMessage) {\n\t\t\t\t\t\tif (responseMessage.deletable) await responseMessage.delete();\n\n\t\t\t\t\t\tconst i = Number(responseMessage.content) - 1;\n\n\t\t\t\t\t\tif (!Number.isNaN(i) && handler.hasPage(i)) handler.index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏪',\n\t\t\trun: ({ handler }) => (handler.index = 0)\n\t\t},\n\t\t{\n\t\t\tid: '◀️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === 0) handler.index = handler.pages.length - 1;\n\t\t\t\telse --handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '▶️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index === handler.pages.length - 1) handler.index = 0;\n\t\t\t\telse ++handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏩',\n\t\t\trun: ({ handler }) => (handler.index = handler.pages.length - 1)\n\t\t},\n\t\t{\n\t\t\tid: '⏹️',\n\t\t\trun: async ({ response, collector }) => {\n\t\t\t\tawait response.reactions.removeAll();\n\t\t\t\tcollector.stop();\n\t\t\t}\n\t\t}\n\t];\n\n\t/**\n\t * The reasons sent by {@link https://discord.js.org/#/docs/main/stable/class/ReactionCollector?scrollTo=e-end ReactionCollector#end}\n\t * event when the message (or its owner) has been deleted.\n\t */\n\tpublic static deletionStopReasons = ['messageDelete', 'channelDelete', 'guildDelete'];\n}\n\nexport interface PaginatedMessage {\n\tconstructor: typeof PaginatedMessage;\n}\n\n/**\n * @example\n * ```typescript\n * // To utilize actions you can use the [[IPaginatedMessageAction]] by implementing it into a class.\n *\n * class ForwardAction implements IPaginatedMessageAction {\n *   public id = '▶️';\n *\n *   public run({ handler }) {\n *     if (handler.index !== handler.pages.length - 1) ++handler.index;\n *   }\n * }\n *\n * // You can also give the object directly.\n *\n * const StopAction: IPaginatedMessageAction {\n *   id: '⏹️',\n *   disableResponseEdit: true,\n *   run: ({ response, collector }) => {\n *     await response.reactions.removeAll();\n *     collector!.stop();\n *   }\n * }```\n */\nexport interface IPaginatedMessageAction {\n\tid: string;\n\trun(context: PaginatedMessageActionContext): Awaited<unknown>;\n}\n\n/**\n * The context to be used in [[IPaginatedMessageAction]].\n */\nexport interface PaginatedMessageActionContext {\n\thandler: PaginatedMessage;\n\tauthor: User;\n\tchannel: TextChannel | NewsChannel;\n\tresponse: Message;\n\tcollector: ReactionCollector;\n}\n\nexport interface PaginatedMessageOptions {\n\tpages?: MessagePage[];\n\tactions?: IPaginatedMessageAction[];\n}\n\n/**\n * The pages that are used for [[PaginatedMessage.pages]]\n *\n * Pages can be either an {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessage} directly,\n * or an awaited function which returns an {@link https://discord.js.org/#/docs/main/stable/class/APIMessage APIMessage}.\n *\n * Furthermore, {@link https://discord.js.org/#/docs/main/stable/typedef/MessageOptions MessageOptions} can be used to\n * construct the pages without state, this library also provides [[MessageBuilder]], which can be used as a chainable\n * alternative to raw objects, similar to how {@link https://discord.js.org/#/docs/main/stable/class/MessageEmbed MessageEmbed}\n * works.\n *\n * @example\n * ```typescript\n * // Direct usage as a MessageBuilder\n * new MessageBuilder().setContent('Test content!');\n * ```\n *\n * @example\n * ```typescript\n * // An awaited function. This function also passes index, pages, and handler.\n * (index, pages) =>\n *   new MessageBuilder().setEmbed(\n *     new MessageEmbed().setFooter(`Page ${index + 1} / ${pages.length}`)\n *   );\n * ```\n *\n * @example\n * ```typescript\n * // Direct usage as an APIMessage\n * new APIMessage(message.channel, {\n *   content: 'Test content!',\n * });\n * ```\n *\n * @example\n * ```typescript\n * // An awaited function. This function also passes index, pages, and handler.\n * (index, pages) =>\n *   new APIMessage(message.channel, {\n *     embed: new MessageEmbed().setFooter(`Page ${index + 1} / ${pages.length}`)\n *   });\n * ```\n */\nexport type MessagePage =\n\t| ((index: number, pages: MessagePage[], handler: PaginatedMessage) => Awaited<APIMessage | MessageOptions>)\n\t| APIMessage\n\t| MessageOptions;\n\ntype Awaited<T> = PromiseLike<T> | T;\n","import type { APIMessage, NewsChannel, TextChannel } from 'discord.js';\nimport { PaginatedMessage } from './PaginatedMessage';\n\n/**\n * This is a LazyPaginatedMessage. Instead of resolving all pages that are functions on [[PaginatedMessage.run]] will resolve when requested.\n */\nexport class LazyPaginatedMessage extends PaginatedMessage {\n\t/**\n\t * Only resolves the page corresponding with the handler's current index.\n\t */\n\tpublic async resolvePagesOnRun(channel: TextChannel | NewsChannel): Promise<void> {\n\t\tawait this.resolvePage(channel, this.index);\n\t}\n\n\t/**\n\t * Resolves the page corresponding with the given index. This also resolves the index's before and after the given index.\n\t * @param index The index to resolve. Defaults to handler's current index.\n\t */\n\tpublic async resolvePage(channel: TextChannel | NewsChannel, index: number): Promise<APIMessage> {\n\t\tconst promises = [super.resolvePage(channel, index)];\n\t\tif (this.hasPage(index - 1)) promises.push(super.resolvePage(channel, index - 1));\n\t\tif (this.hasPage(index + 1)) promises.push(super.resolvePage(channel, index + 1));\n\n\t\tconst [result] = await Promise.all(promises);\n\t\treturn result;\n\t}\n}\n","import type { APIMessageContentResolvable, MessageAdditions, MessageOptions } from 'discord.js';\n\nexport type Constructor<A extends readonly any[] = readonly any[], R = any> = new (...args: A) => R;\nexport type Awaited<T> = PromiseLike<T> | T;\n\n/**\n * A type to extend multiple discord types and simplify usage in [[MessagePrompter]]\n */\nexport type MessagePrompterMessage = APIMessageContentResolvable | (MessageOptions & { split?: false }) | MessageAdditions;\n\nexport const enum MessagePrompterStrategies {\n\tConfirm = 'confirm',\n\tNumber = 'number',\n\tMessage = 'message',\n\tReaction = 'reaction'\n}\n","import type { CollectorFilter, DMChannel, EmojiIdentifierResolvable, Message, MessageReaction, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { Awaited, MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\n\nexport abstract class MessagePrompterBaseStrategy {\n\t/**\n\t * The type of strategy that was used\n\t */\n\tpublic type: string;\n\n\t/**\n\t * The timeout that was used in the collector\n\t */\n\tpublic timeout: number;\n\n\t/**\n\t * Wether to return an explicit object with data, or the strategies' default\n\t */\n\tpublic explicitReturn: boolean;\n\n\t/**\n\t * The message that has been sent in [[MessagePrompter.run]]\n\t */\n\tpublic appliedMessage: Message | null = null;\n\n\t/**\n\t * The message that will be sent in [[MessagePrompter.run]]\n\t */\n\tpublic message: MessagePrompterMessage;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(type: string, message: MessagePrompterMessage, options?: IMessagePrompterStrategyOptions) {\n\t\tthis.type = type;\n\t\tthis.timeout = options?.timeout ?? MessagePrompterBaseStrategy.defaultStrategyOptions.timeout;\n\t\tthis.explicitReturn = options?.explicitReturn ?? MessagePrompterBaseStrategy.defaultStrategyOptions.explicitReturn;\n\t\tthis.message = message;\n\t}\n\n\tpublic abstract run(channel: TextChannel | NewsChannel | DMChannel, authorOrFilter: User | CollectorFilter): Awaited<unknown>;\n\n\tprotected async collectReactions(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter,\n\t\treactions: string[] | EmojiIdentifierResolvable[]\n\t): Promise<IMessagePrompterExplicitReturnBase> {\n\t\tthis.appliedMessage = await channel.send(this.message);\n\n\t\tconst collector = this.appliedMessage.createReactionCollector(this.createReactionPromptFilter(reactions, authorOrFilter), {\n\t\t\tmax: 1,\n\t\t\ttime: this.timeout\n\t\t});\n\n\t\tlet resolved = false;\n\t\tconst collected: Promise<MessageReaction> = new Promise<MessageReaction>((resolve, reject) => {\n\t\t\tcollector.on('collect', (r) => {\n\t\t\t\tresolve(r);\n\t\t\t\tresolved = true;\n\t\t\t\tcollector.stop();\n\t\t\t});\n\n\t\t\tcollector.on('end', (collected) => {\n\t\t\t\tresolved = true;\n\t\t\t\tif (!collected.size) reject(new Error('Collector has ended'));\n\t\t\t});\n\t\t});\n\n\t\tfor (const reaction of reactions) {\n\t\t\tif (resolved) break;\n\n\t\t\tawait this.appliedMessage.react(reaction);\n\t\t}\n\n\t\tconst firstReaction = await collected;\n\t\tconst emoji = firstReaction?.emoji;\n\n\t\tconst reaction = reactions.find((r) => (emoji?.id ?? emoji?.name) === r);\n\n\t\treturn {\n\t\t\temoji,\n\t\t\treaction,\n\t\t\tstrategy: this,\n\t\t\tappliedMessage: this.appliedMessage,\n\t\t\tmessage: this.message\n\t\t};\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitReactions function\n\t */\n\tprotected createReactionPromptFilter(reactions: string[] | EmojiIdentifierResolvable[], authorOrFilter: User | CollectorFilter): CollectorFilter {\n\t\treturn async (reaction: MessageReaction, user: User) =>\n\t\t\treactions.includes(reaction.emoji.id ?? reaction.emoji.name) &&\n\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(reaction, user) : user.id === authorOrFilter.id) &&\n\t\t\t!user.bot;\n\t}\n\n\t/**\n\t * The default strategy options\n\t */\n\tpublic static defaultStrategyOptions: Required<IMessagePrompterStrategyOptions> = {\n\t\ttimeout: 10 * 1000,\n\t\texplicitReturn: false\n\t};\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitConfirmReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterConfirmStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterConfirmStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterConfirmStrategyOptions {\n\t/**\n\t * The cancel emoji used\n\t */\n\tpublic confirmEmoji: string | EmojiResolvable;\n\n\t/**\n\t * The confirm emoji used\n\t */\n\tpublic cancelEmoji: string | EmojiResolvable;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param message The message to be sent [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options?: IMessagePrompterConfirmStrategyOptions) {\n\t\tsuper('confirm', message, options);\n\n\t\tthis.confirmEmoji = options?.confirmEmoji ?? MessagePrompterConfirmStrategy.confirmEmoji;\n\t\tthis.cancelEmoji = options?.cancelEmoji ?? MessagePrompterConfirmStrategy.cancelEmoji;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals confirm.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to a boolean denoting the value of the input (`true` for yes, `false` for no).\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitConfirmReturn | boolean> {\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, [this.confirmEmoji, this.cancelEmoji]);\n\n\t\tconst confirmed = (response?.emoji?.id ?? response?.emoji?.name) === MessagePrompterConfirmStrategy.confirmEmoji;\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, confirmed } : confirmed;\n\t}\n\n\t/**\n\t * The default confirm emoji used for [[MessagePrompterConfirmStrategy]]\n\t */\n\tpublic static confirmEmoji: string | EmojiResolvable = '🇾';\n\n\t/**\n\t * The default cancel emoji used for [[MessagePrompterConfirmStrategy]]\n\t */\n\tpublic static cancelEmoji: string | EmojiResolvable = '🇳';\n}\n","import type { CollectorFilter, DMChannel, Message, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitMessageReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterMessageStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterStrategyOptions {\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterStrategyOptions) {\n\t\tsuper('message', message, options);\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals message.\n\t * The handler will wait for one (1) message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the message object received.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitMessageReturn | Message> {\n\t\tthis.appliedMessage = await channel.send(this.message);\n\n\t\tconst collector = await channel.awaitMessages(this.createMessagePromptFilter(authorOrFilter), {\n\t\t\tmax: 1,\n\t\t\ttime: this.timeout,\n\t\t\terrors: ['time']\n\t\t});\n\t\tconst response = collector.first();\n\n\t\tif (!response) {\n\t\t\tthrow new Error('No messages received');\n\t\t}\n\n\t\treturn this.explicitReturn\n\t\t\t? {\n\t\t\t\t\tresponse,\n\t\t\t\t\tstrategy: this as MessagePrompterBaseStrategy,\n\t\t\t\t\tappliedMessage: this.appliedMessage,\n\t\t\t\t\tmessage: this.message\n\t\t\t  }\n\t\t\t: response;\n\t}\n\n\t/**\n\t * Creates a filter for the collector to filter on\n\t * @return The filter for awaitMessages function\n\t */\n\tprivate createMessagePromptFilter(authorOrFilter: User | CollectorFilter): CollectorFilter {\n\t\treturn async (message: Message) =>\n\t\t\t(typeof authorOrFilter === 'function' ? await authorOrFilter(message) : message.author.id === authorOrFilter.id) && !message.author.bot;\n\t}\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitNumberReturn } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterNumberStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterNumberStrategy extends MessagePrompterBaseStrategy implements IMessagePrompterNumberStrategyOptions {\n\t/**\n\t * The available number emojis\n\t */\n\tpublic numberEmojis: string[] | EmojiResolvable[];\n\t/**\n\t * The available number emojis\n\t */\n\tpublic start: number;\n\t/**\n\t * The available number emojis\n\t */\n\tpublic end: number;\n\n\t/**\n\t * Constructor for the [[MessagePrompterBaseStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterNumberStrategyOptions) {\n\t\tsuper('number', message, options);\n\n\t\tthis.numberEmojis = options?.numberEmojis ?? MessagePrompterNumberStrategy.numberEmojis;\n\t\tthis.start = options?.start ?? 0;\n\t\tthis.end = options?.end ?? 10;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message if [[IMessagePrompterOptions.type]] equals number.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the selected number within the range.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitNumberReturn | number> {\n\t\t// 0 and 10 are the maximum available emojis as a number\n\t\tif (this.start < 0) throw new TypeError('Starting number cannot be less than 0.');\n\t\tif (this.end > 10) throw new TypeError('Ending number cannot be more than 10.');\n\n\t\tconst numbers = Array.from({ length: this.end - this.start + 1 }, (_, n: number) => n + this.start);\n\t\tconst emojis = this.numberEmojis.slice(this.start, this.end);\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, emojis);\n\n\t\tconst emojiIndex = emojis.findIndex((emoji) => (response?.emoji?.id ?? response?.emoji?.name) === emoji);\n\t\tconst number = numbers[emojiIndex];\n\n\t\t// prettier-ignore\n\t\treturn this.explicitReturn ? { ...response, number } : number;\n\t}\n\n\t/**\n\t * The default available number emojis\n\t */\n\tpublic static numberEmojis = ['0️⃣', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟'];\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, NewsChannel, TextChannel, User } from 'discord.js';\nimport type { MessagePrompterMessage } from '../constants';\nimport type { IMessagePrompterExplicitReturnBase } from '../ExplicitReturnTypes';\nimport type { IMessagePrompterReactionStrategyOptions } from '../strategyOptions';\nimport { MessagePrompterBaseStrategy } from './MessagePrompterBaseStrategy';\n\nexport class MessagePrompterReactionStrategy extends MessagePrompterBaseStrategy implements MessagePrompterReactionStrategy {\n\t/**\n\t * The emojis used\n\t */\n\tpublic reactions: string[] | EmojiResolvable[];\n\n\t/**\n\t * Constructor for the [[MessagePrompterReactionStrategy]] class\n\t * @param messagePrompter The used instance of [[MessagePrompter]]\n\t * @param options Overrideable options if needed.\n\t */\n\tpublic constructor(message: MessagePrompterMessage, options: IMessagePrompterReactionStrategyOptions) {\n\t\tsuper('reactions', message, options);\n\n\t\tthis.reactions = options?.reactions;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompterReactionStrategy]] and sends the message.\n\t * The handler will wait for one (1) reaction.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t * @returns A promise that resolves to the reaction object.\n\t */\n\tpublic async run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): Promise<IMessagePrompterExplicitReturnBase | string | EmojiResolvable> {\n\t\tif (!this.reactions?.length) throw new TypeError('There are no reactions provided.');\n\n\t\tconst response = await this.collectReactions(channel, authorOrFilter, this.reactions);\n\n\t\treturn this.explicitReturn ? response : response.reaction ?? response;\n\t}\n}\n","import type { CollectorFilter, DMChannel, EmojiResolvable, Message, NewsChannel, TextChannel, User } from 'discord.js';\nimport { Constructor, MessagePrompterMessage, MessagePrompterStrategies } from './constants';\nimport type {\n\tIMessagePrompterExplicitConfirmReturn,\n\tIMessagePrompterExplicitMessageReturn,\n\tIMessagePrompterExplicitNumberReturn,\n\tIMessagePrompterExplicitReturnBase\n} from './ExplicitReturnTypes';\nimport { MessagePrompterBaseStrategy } from './strategies/MessagePrompterBaseStrategy';\nimport { MessagePrompterConfirmStrategy } from './strategies/MessagePrompterConfirmStrategy';\nimport { MessagePrompterMessageStrategy } from './strategies/MessagePrompterMessageStrategy';\nimport { MessagePrompterNumberStrategy } from './strategies/MessagePrompterNumberStrategy';\nimport { MessagePrompterReactionStrategy } from './strategies/MessagePrompterReactionStrategy';\nimport type {\n\tIMessagePrompterConfirmStrategyOptions,\n\tIMessagePrompterNumberStrategyOptions,\n\tIMessagePrompterReactionStrategyOptions,\n\tIMessagePrompterStrategyOptions\n} from './strategyOptions';\n\nexport interface StrategyReturns {\n\t[MessagePrompterStrategies.Confirm]: IMessagePrompterExplicitConfirmReturn | boolean;\n\t[MessagePrompterStrategies.Message]: IMessagePrompterExplicitMessageReturn | Message;\n\t[MessagePrompterStrategies.Number]: IMessagePrompterExplicitNumberReturn | number;\n\t[MessagePrompterStrategies.Reaction]: IMessagePrompterExplicitReturnBase | string | EmojiResolvable;\n}\nexport interface StrategyOptions {\n\t[MessagePrompterStrategies.Confirm]: IMessagePrompterConfirmStrategyOptions;\n\t[MessagePrompterStrategies.Message]: IMessagePrompterStrategyOptions;\n\t[MessagePrompterStrategies.Number]: IMessagePrompterNumberStrategyOptions;\n\t[MessagePrompterStrategies.Reaction]: IMessagePrompterReactionStrategyOptions;\n}\n\n/**\n * This is a [[MessagePrompter]], a utility that sends a message, prompting for user input. The prompt can resolve to any kind of input.\n * There are several specifiable types to prompt for user input, and they are as follows:\n * - Confirm\n *   This will send a simple Yes/No prompt, using reactions.\n * - Number\n *   This will prompt for an integer. By default it will be a number between 0 and 10 (inclusive), however you can also specify your own custom range (inclusive).\n * - Reactions\n *   This can be any kind of reaction emoji that Discord supports, and as many as you want. This type will return that reaction instead of a boolean.\n * - Message\n *   This will prompt the user and require a response in the form of a message. This can be helpful if you require a user to upload an image for example, or give text input.\n *\n * You must either use this class directly or extend it.\n *\n * [[MessagePrompter]] uses reactions to prompt for a yes/no answer and returns it.\n * You can modify the confirm and cancel reaction used for each message, or use the [[MessagePrompter.defaultPrompts]].\n * [[MessagePrompter.defaultPrompts]] is also static so you can modify these directly.\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Are you sure you want to continue?');\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Choose a number between 5 and 10?', 'number', {\n * \t\tstart: 5,\n * \t\tend: 10\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Are you happy or sad?', 'reaction', {\n * \t\treactions: ['🙂', '🙁']\n * });\n * const result = await handler.run(channel, author);\n * ```\n *\n * @example\n * ```typescript\n * const handler = new MessagePrompter('Do you love me?', 'message');\n * const result = await handler.run(channel, author);\n * ```\n */\nexport class MessagePrompter<S extends MessagePrompterStrategies = MessagePrompterStrategies.Confirm> {\n\t/**\n\t * The strategy used in [[MessagePrompter.run]]\n\t */\n\tpublic strategy: MessagePrompterBaseStrategy;\n\n\t/**\n\t * Constructor for the [[MessagePrompter]] class\n\t * @param message The message to send.\n\t * @param strategy The strategy name or Instance to use\n\t * @param strategyOptions The options that are passed to the strategy\n\t */\n\tpublic constructor(\n\t\tmessage: MessagePrompterMessage | MessagePrompterBaseStrategy,\n\t\tstrategy?: S,\n\t\tstrategyOptions?: S extends keyof StrategyOptions ? StrategyOptions[S] : never\n\t) {\n\t\tlet strategyToRun: MessagePrompterBaseStrategy | undefined = undefined;\n\n\t\tif (message instanceof MessagePrompterBaseStrategy) {\n\t\t\tstrategyToRun = message as MessagePrompterBaseStrategy;\n\t\t} else {\n\t\t\tconst mapStrategy = MessagePrompter.strategies.get(strategy ?? MessagePrompter.defaultStrategy);\n\n\t\t\tif (!mapStrategy) {\n\t\t\t\tthrow new Error('No strategy provided');\n\t\t\t}\n\n\t\t\tstrategyToRun = new mapStrategy(message, strategyOptions);\n\t\t}\n\n\t\tthis.strategy = strategyToRun;\n\t}\n\n\t/**\n\t * This executes the [[MessagePrompter]] and sends the message.\n\t * @param channel The channel to use.\n\t * @param authorOrFilter An author object to validate or a {@link https://discord.js.org/#/docs/main/stable/typedef/CollectorFilter CollectorFilter} predicate callback.\n\t */\n\tpublic run(\n\t\tchannel: TextChannel | NewsChannel | DMChannel,\n\t\tauthorOrFilter: User | CollectorFilter\n\t): S extends keyof StrategyReturns ? Promise<StrategyReturns[S]> : never {\n\t\treturn this.strategy.run(channel, authorOrFilter) as S extends keyof StrategyReturns ? Promise<StrategyReturns[S]> : never;\n\t}\n\n\t/**\n\t * The available strategies\n\t */\n\tpublic static strategies: Map<\n\t\tMessagePrompterStrategies,\n\t\tConstructor<\n\t\t\t| ConstructorParameters<typeof MessagePrompterConfirmStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterNumberStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterReactionStrategy>\n\t\t\t| ConstructorParameters<typeof MessagePrompterMessageStrategy>,\n\t\t\tMessagePrompterConfirmStrategy | MessagePrompterNumberStrategy | MessagePrompterReactionStrategy | MessagePrompterMessageStrategy\n\t\t>\n\t\t// @ts-expect-error 2322\n\t> = new Map([\n\t\t[MessagePrompterStrategies.Confirm, MessagePrompterConfirmStrategy],\n\t\t[MessagePrompterStrategies.Number, MessagePrompterNumberStrategy],\n\t\t[MessagePrompterStrategies.Reaction, MessagePrompterReactionStrategy],\n\t\t[MessagePrompterStrategies.Message, MessagePrompterMessageStrategy]\n\t]);\n\n\t/**\n\t * The default strategy to use\n\t */\n\tpublic static defaultStrategy: MessagePrompterStrategies = MessagePrompterStrategies.Confirm;\n}\n","import type {\n\tCategoryChannel,\n\tChannel,\n\tDMChannel,\n\tGuildChannel,\n\tNewsChannel,\n\tPartialGroupDMChannel,\n\tStoreChannel,\n\tTextChannel,\n\tVoiceChannel\n} from 'discord.js';\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/CategoryChannel CategoryChannel}\n * @param channel The channel to check\n */\nexport function isCategoryChannel(channel: Channel): channel is CategoryChannel {\n\treturn channel.type === 'category';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/DMChannel DMChannel}\n * @param channel The channel to check\n */\nexport function isDMChannel(channel: Channel): channel is DMChannel {\n\treturn channel.type === 'dm';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/PartialGroupDMChannel PartialGroupDMChannel}\n * @param channel The channel to check\n */\nexport function isGroupChannel(channel: Channel): channel is PartialGroupDMChannel {\n\treturn channel.type === 'group';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/GuildChannel GuildChannel}\n * @param channel The channel to check\n */\nexport function isGuildBasedChannel(channel: Channel): channel is GuildChannel {\n\treturn channel.type !== 'dm' && channel.type !== 'group' && channel.type !== 'unknown';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/NewsChannel NewsChannel}\n * @param channel The channel to check\n */\nexport function isNewsChannel(channel: Channel): channel is NewsChannel {\n\treturn channel.type === 'news';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/StoreChannel StoreChannel}\n * @param channel The channel to check\n */\nexport function isStoreChannel(channel: Channel): channel is StoreChannel {\n\treturn channel.type === 'store';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/TextChannel TextChannel}\n * @param channel The channel to check\n */\nexport function isTextChannel(channel: Channel): channel is TextChannel {\n\treturn channel.type === 'text';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/VoiceChannel VoiceChannel}\n * @param channel The channel to check\n */\nexport function isVoiceChannel(channel: Channel): channel is VoiceChannel {\n\treturn channel.type === 'voice';\n}\n"],"names":[],"mappings":"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"}