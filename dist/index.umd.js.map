{"version":3,"file":"index.umd.js","sources":["../src/lib/Bucket.ts"],"sourcesContent":["// TypeScript port of Serenity's standard framework buckets.\n// Licensed to the Serenity Contributors under one or more agreements.\n// The Serenity Contributors licenses this file to you under the ISC license.\n// https://github.com/serenity-rs/serenity/blob/current/src/framework/standard/structures/buckets.rs\n\n/**\n * An entry in the bucket.\n */\nexport interface BucketEntry {\n\tlastTime: number;\n\tsetTime: number;\n\ttickets: number;\n}\n\n/**\n * The bucket limits.\n */\nexport interface BucketLimit {\n\t/**\n\t * The time between tickets.\n\t *\n\t * If timespan is zero, there will be no spacing between usages, this means\n\t * that a 5/5s bucket ({@link BucketLimit#limit limit} of 5 in 5 seconds\n\t * {@link Bucket#delay delay}) will accept 5 requests, then will wait for\n\t * the remaining time.\n\t *\n\t * However, if in the previous example, this is set to 1 second, this will\n\t * then space the requests evenly to 1 request per second until the bucket\n\t * is consumed.\n\t */\n\ttimespan: number;\n\n\t/**\n\t * The maximum amount of tickets.\n\t *\n\t * This limits the amount of requests that can be made within the\n\t * {@link Bucket}'s {@link Bucket#delay delay}.\n\t */\n\tmaximum: number;\n}\n\n/**\n * The Bucket that handles ratelimits.\n */\nexport class Bucket<T> {\n\t/**\n\t * The amount of milliseconds entries last.\n\t */\n\tpublic delay = 0;\n\n\t/**\n\t * The bucket limits. If set to null, the requests will be limited to one\n\t * request per {@link delay} milliseconds.\n\t */\n\tpublic limit: Required<BucketLimit> = { timespan: 0, maximum: 1 };\n\n\t/**\n\t * The bucket entries for the instance.\n\t */\n\tprivate entries = new Map<T, BucketEntry>();\n\n\t/**\n\t * Sets the delay for the bucket.\n\t * @param delay The delay to be set.\n\t */\n\tpublic setDelay(delay: number): this {\n\t\tthis.delay = delay;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the limit for the bucket.\n\t * @param limit The limit to be set.\n\t */\n\tpublic setLimit(limit: BucketLimit): this {\n\t\tthis.limit = limit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the amount of time needed for the bucket to unlock.\n\t * @param id The ID of the entry to check.\n\t * @returns Always a positive number, 0 if there is no delay.\n\t */\n\tpublic take(id: T): number {\n\t\tconst now = Date.now();\n\t\tconst entry = this.getEntry(id);\n\n\t\t// If there is a limit:\n\t\tif (this.limit.maximum > 1) {\n\t\t\t// Then check whether tickets reach said limit:\n\t\t\tif (entry.tickets + 1 > this.limit.maximum) {\n\t\t\t\t// If the entry is new, setTime is initialized as 0, but also,\n\t\t\t\t// if the duration yields a negative number (expired limit),\n\t\t\t\t// then it must fall-back to setting tickets as 0, setTime as\n\t\t\t\t// now, and fall-back to the delay checking.\n\t\t\t\tif (entry.setTime !== 0) {\n\t\t\t\t\tconst duration = entry.setTime + this.limit.timespan - now;\n\t\t\t\t\tif (duration > 0) return duration;\n\t\t\t\t}\n\n\t\t\t\tentry.tickets = 0;\n\t\t\t}\n\n\t\t\tentry.setTime = now;\n\t\t}\n\n\t\t// If the entry is new, lastTime is initialized as 0, but also, if the\n\t\t// duration yields a negative number (expired delay), then it must\n\t\t// fall-back into increasing tickets by one and lastTime as now.\n\t\tif (this.delay !== 0 && entry.lastTime !== 0) {\n\t\t\tconst duration = entry.lastTime + this.delay - now;\n\t\t\tif (duration > 0) return duration;\n\t\t}\n\n\t\t++entry.tickets;\n\t\tentry.lastTime = now;\n\n\t\t// The entry wasn't either limited nor has an applicable delay, return 0.\n\t\treturn 0;\n\t}\n\n\tprivate getEntry(id: T): BucketEntry {\n\t\tconst entry = this.entries.get(id);\n\t\tif (entry) return entry;\n\n\t\tconst data: BucketEntry = { lastTime: 0, setTime: 0, tickets: 0 };\n\t\tthis.entries.set(id, data);\n\t\treturn data;\n\t}\n}\n"],"names":[],"mappings":";;;;;;CAAA;CACA;CACA;CACA;CAsCA;;;OAGa,MAAM;KAAnB;;;;SAIC;;;;oBAAe,CAAC;YAAC;;;;;SAMjB;;;;oBAAsC,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE;YAAC;;;;SAKlE;;;;oBAAkB,IAAI,GAAG,EAAkB;YAAC;MAuE5C;;;;;KAjEO,QAAQ,CAAC,KAAa;SAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACnB,OAAO,IAAI,CAAC;MACZ;;;;;KAMM,QAAQ,CAAC,KAAkB;SACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACnB,OAAO,IAAI,CAAC;MACZ;;;;;;KAOM,IAAI,CAAC,EAAK;SAChB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACvB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;;SAGhC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,EAAE;;aAE3B,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;;;;;iBAK3C,IAAI,KAAK,CAAC,OAAO,KAAK,CAAC,EAAE;qBACxB,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC;qBAC3D,IAAI,QAAQ,GAAG,CAAC;yBAAE,OAAO,QAAQ,CAAC;kBAClC;iBAED,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;cAClB;aAED,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;UACpB;;;;SAKD,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,KAAK,CAAC,EAAE;aAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;aACnD,IAAI,QAAQ,GAAG,CAAC;iBAAE,OAAO,QAAQ,CAAC;UAClC;SAED,EAAE,KAAK,CAAC,OAAO,CAAC;SAChB,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC;;SAGrB,OAAO,CAAC,CAAC;MACT;KAEO,QAAQ,CAAC,EAAK;SACrB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACnC,IAAI,KAAK;aAAE,OAAO,KAAK,CAAC;SAExB,MAAM,IAAI,GAAgB,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;SAClE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAC3B,OAAO,IAAI,CAAC;MACZ;;;;;;;;;;;"}